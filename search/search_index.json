{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"],"fields":{"title":{"boost":1000.0},"text":{"boost":1.0},"tags":{"boost":1000000.0}}},"docs":[{"location":"","title":"Iolanta","text":"Iolanta              Linked Data browser      <ul> <li> <p> Discover</p> </li> <li> <p> Create</p> </li> <li> <p> Visualize</p> </li> </ul> Linked Data"},{"location":"#in-the-terminal","title":"In the Terminal","text":"NanopublicationORCID Person ProfileOntology: RDF SchemaTerm: <code>Person</code> from Friend of a Friend Ontology <p><pre><code>iolanta https://w3id.org/np/RA7OYmnx-3ln_AY233lElN01wSDJWDOXPz061Ah93EQ2I\n</code></pre> </p> <p><pre><code>iolanta https://orcid.org/0000-0002-1825-0097\n</code></pre> </p> <p><pre><code>iolanta https://www.w3.org/2000/01/rdf-schema#\n</code></pre> </p> <p><pre><code>iolanta https://xmlns.com/foaf/0.1/Person\n</code></pre> </p> <ul> <li> <p> Install &amp; try out!</p> </li> </ul>"},{"location":"#pip-install-iolanta","title":"<pre><code>pip install iolanta\n</code></pre>","text":"<p>Feel free to \u2795 create an issue!</p>"},{"location":"Facet/","title":"<code>Facet</code>","text":"<p>Facet is a visualization. It is a piece of program code that processes a given RDF node and its context, the whole graph, and draws a visualization of a certain type.</p> <p></p> <p>In RDF, a facet is referenced by an IRI: this way, Linked Data can tell Iolanta how it can be visualized.</p> Facet Type In RDF In Code Python based facet <code>pkg:pypi/some-pypi-package#facet-name</code> Python class, inherited from <code>iolanta.facets.Facet</code> <p>More types are planned (1).</p> <ol> <li>In particular, WASM based facets downloadable from the Web and executed in a sandbox.</li> </ol>"},{"location":"Facet/#facets","title":"Facets","text":"<p>For now, the only facets that Iolanta supports are bundled with it.</p> <ul> <li> <p> <code>TitleFacet</code></p> <p>Render a human readable title for a node.</p> <ul> <li>URI: <code>pkg:pypi/iolanta#title</code></li> <li>Outputs: string</li> </ul> </li> <li> <p> <code>Class</code></p> <p>For an RDFS or OWL <code>Class</code>, render a list of its instances that we know about.</p> <ul> <li>URI: <code>pkg:pypi/iolanta#textual-classFacet</code> </li> <li>Outputs: Textual widget</li> </ul> </li> <li> <p> <code>TextualDefaultFacet</code></p> <p>All RDF properties and their values for a given node in interactive textual UI. (Not best naming though.)</p> <ul> <li>URI: <code>pkg:pypi/iolanta#textual-properties</code></li> <li>Outputs: Textual widget</li> </ul> </li> <li> <p> <code>GraphFacet</code></p> <p>For an RDF graph, list triples that it contains.</p> <ul> <li>URI: <code>pkg:pypi/iolanta#textual-graph</code></li> <li>Outputs: Textual widget</li> </ul> </li> <li> <p> <code>NanopublicationFacet</code></p> <p>Display contents of a Nanopublication.</p> <ul> <li>URI: <code>pkg:pypi/iolanta#textual-nanopublication</code></li> <li>Outputs: Textual widget</li> </ul> </li> <li> <p> <code>OntologyFacet</code></p> <p>Display terms of an Ontology.</p> <ul> <li>URI: <code>pkg:pypi/iolanta#textual-ontology</code></li> <li>Outputs: Textual widget</li> </ul> </li> <li> <p> <code>TextualPropertyPairsTableFacet</code></p> <p>Display Subject \u2192 Object pairs for an RDF Property.</p> <ul> <li>URI: <code>pkg:pypi/iolanta#textual-property-pairs</code></li> <li>Outputs: Textual widget</li> </ul> </li> <li> <p> Ideas for more?</p> <p>Feel free to \u2795 add an issue!</p> </li> </ul>"},{"location":"has-sub-graph/","title":"<code>iolanta:has-sub-graph</code> property","text":"<ul> <li> <p> Domain</p> <p><code>iolanta:Graph</code> RDF Graph</p> </li> <li> <p> Range</p> <p><code>iolanta:Graph</code>RDF Graph</p> </li> </ul> <p>If one RDF document defines multiple graph (for instance, using <code>@graph</code> JSON-LD keyword), Iolanta will import each of these documents as a separate RDF Graph.</p> <p><code>iolanta:has-sub-graph</code> property will link the parent document graph to each of the graphs that document had created.</p>"},{"location":"is-preferred-over/","title":"\u227c <code>iolanta:is-preferred-over</code>","text":"<ul> <li> <p> Domain</p> <p><code>iolanta:Facet</code> Iolanta visualization</p> </li> <li> <p> Range</p> <p><code>iolanta:Facet</code> Not as cool Iolanta visualization</p> </li> </ul> <p>Sometimes, and for some contexts, one facet is more preferable than the other. For instance, if the user opens a Nanopublication, it is rather more efficient to present it with the dedicated facet by default rather than the default Properties view. That is what this relation helps to achieve.</p> <p>Essentially, it defines a Partial Order on the set of Facets.</p>"},{"location":"matches/","title":"<code>iolanta:matches</code> property","text":"<ul> <li> <p> Domain</p> <p><code>iolanta:Facet</code> Iolanta visualization</p> </li> <li> <p> Range (1)</p> <p><code>rdfs:Literal</code>SPARQL <code>ASK</code> query</p> </li> </ul> <ol> <li>More features planned:<ul> <li> <code>rdfs:Resource</code>URL of a file with a SPARQL <code>ASK</code> query</li> <li> <code>sh:Shape</code>SHACL shape for a node the Facet can visualize</li> </ul> </li> </ol> <p><code>iolanta:matches</code> property describes an RDF node that the given Facet can visualize. Currently, the pattern can only be an inline SPARQL <code>ASK</code> query. The result of the query is a boolean value. If the query returns <code>true</code>, then the Facet is capable of visualizing the node denoted as <code>$this</code> in the query.</p> <p>One Facet might have multiple patterns associated with it.</p>"},{"location":"matches/#usage-example-graph-triples-visualization","title":"Usage Example: Graph Triples visualization","text":"<code>graph-triples.yamlld</code><code>context.yaml</code> Visualization <p> See the file on  GitHub.</p> <p>This piece of code defines the facet and describes the shape of the data this facet is capable of visualizing using a SPARQL <code>ASK</code> query.</p> <pre><code>\"@context\": context.yaml\n$id: pkg:pypi/iolanta#textual-graph\n$: Graph Triples\n\u2192: https://iolanta.tech/cli/textual\n\u2aaf: pkg:pypi/iolanta#textual-inverse-properties\n\u21a6: ASK WHERE { GRAPH $this { ?s ?p ?o } }\n</code></pre> <p> See the file on  GitHub.</p> <p>Shared context for YAML-LD descriptions of bundled Iolanta facets. Documents the meaning of the properties used in <code>graph-triples.yamlld</code>.</p> <pre><code>\"@context\":\n  rdfs: \"https://www.w3.org/2000/01/rdf-schema#\"\n  rdf: https://www.w3.org/1999/02/22-rdf-syntax-ns#\n  iolanta: https://iolanta.tech/\n  owl: https://www.w3.org/2002/07/owl#\n  schema: https://schema.org/\n  xsd: https://www.w3.org/2001/XMLSchema#\n  skos: https://www.w3.org/2004/02/skos/core#\n  foaf: https://xmlns.com/foaf/0.1/\n  vann: https://purl.org/vocab/vann/\n\n  \"@vocab\": \"local:\"\n  \"@base\": \"local:\"\n\n  # Here goes convenience context.\n  \"$base\": \"@base\"\n  \"$container\": \"@container\"\n  \"$direction\": \"@direction\"\n  \"$embed\": \"@embed\"\n  \"$explicit\": \"@explicit\"\n  \"$graph\": \"@graph\"\n  \"$id\": \"@id\"\n  \"$import\": \"@import\"\n  \"$included\": \"@included\"\n  \"$index\": \"@index\"\n  \"$json\": \"@json\"\n  \"$language\": \"@language\"\n  \"$list\": \"@list\"\n  \"$nest\": \"@nest\"\n  \"$none\": \"@none\"\n  \"$omitDefault\": \"@omitDefault\"\n  \"$propagate\": \"@propagate\"\n  \"$protected\": \"@protected\"\n  \"$requireAll\": \"@requireAll\"\n  \"$reverse\": \"@reverse\"\n  \"$set\": \"@set\"\n  \"$type\": \"@type\"\n  \"$value\": \"@value\"\n  \"$version\": \"@version\"\n  \"$vocab\": \"@vocab\"\n\n  # Uncommenting any of the below will lead to a complaint about \"@\" from PyLD.\n  # \"$null\": \"@null\"\n  # \"$never\": \"@never\"\n  # \"$once\": \"@once\"\n  # \"$always\": \"@always\"\n\n  iolanta:hasInstanceFacet:\n    \"@type\": \"@id\"\n\n  iolanta:hasDatatypeFacet:\n    \"@type\": \"@id\"\n\n  iolanta:outputs:\n    \"@type\": \"@id\"\n\n  iolanta:hasDefaultFacet:\n    \"@type\": \"@id\"\n\n  rdf:type:\n    \"@type\": \"@id\"\n\n  $: rdfs:label\n  \u2192:\n    \"@type\": \"@id\"\n    \"@id\": iolanta:outputs\n\n  \u2286:\n    \"@type\": \"@id\"\n    \"@id\": rdfs:subClassOf\n\n  \u2aaf:\n    \"@type\": \"@id\"\n    \"@id\": iolanta:is-preferred-over\n\n  \u21a6: iolanta:matches\n</code></pre> <pre><code>iolanta https://json-ld.github.io/yaml-ld/spec/data/namespace-prefixes.yamlld\n</code></pre> <p>By default, every file loaded by Iolanta is treated as an RDF graph, and Graph Triples is configured to be able to visualize RDF Graphs. Voila!</p> <p></p>"},{"location":"outputs/","title":"\u2192 <code>iolanta:outputs</code>","text":"<ul> <li> <p> Domain</p> <p><code>iolanta:Facet</code> Iolanta visualization</p> </li> <li> <p> Range</p> <p><code>rdfs:Datatype</code> Datatype of the value the facet returns</p> </li> </ul> <p>Facets return visualizations. If we were to save a visualization as a node into an RDF graph, that would be a Literal; and a Literal would have a Datatype associated with it.</p> <p>We leverage it to describe types of visualizations. In different contexts, we might want different datatypes. For instance, if a facet renders some piece of a knowledge graph as a string then it outputs an <code>xsd:string</code>.</p> <ul> <li> <p> Title</p> <p>A short string naming something. Used in links, lists, page titles, property tables, and many other cases.</p> </li> <li> <p> Fallback Title</p> <p>Type that only the default, fallback title facet can output. Used to fallback to the default implementation if a more specialized one does not work.</p> </li> </ul>"},{"location":"roadmap/","title":"Roadmap","text":"<p>Roadmap of Iolanta development shows known yet unsolved bugs and to-do items. Some of them are clickable: they already have their GitHub issues associated to them.</p> <p>This roadmap is incomplete</p> <p>If you have more ideas how to achieve happiness \u2014 you are more than welcome to contribute them!    </p> <pre><code>graph LR\n    happiness(\"\ud83d\ude80 Happiness!\")\n    classDef happiness fill:#080,stroke:#080,stroke-width:1px,font-weight:bold;\n    class happiness happiness\n\n    ipfs(\"Render LD from IPFS\") --&gt; happiness\n\n    wasm(\"First WASM based facet\") --&gt; generate-roadmap(\"Generate this roadmap&lt;br/&gt;from LD\") --&gt; roadmap3d(\"Implement a 3D view&lt;br/&gt;for the roadmap\") --&gt; happiness\n\n    cli-construct(\"CLI to construct a graph\") --&gt; happiness\n\n    wasm --&gt; 3d(\"Render LD graph in 3D\") --&gt; happiness\n\n    jeeves-sh(\"jeeves.sh does not expose LD\") --&gt; happiness\n    class jeeves-sh bug\n\n    yeti-sh(\"yeti.sh does not expose LD\") --&gt; happiness\n    class yeti-sh bug\n\n    np-create-yaml-ld(\"Support YAML-LD @ &lt;code&gt;np create&lt;/code&gt;?\") --&gt; nanopub-blog-post(\"Blog post:&lt;br/&gt;&lt;strong&gt;Nanopublishing with Iolanta&lt;/strong&gt;\") --&gt; markdown-nanopub-blog-post(\"Blog post:&lt;br/&gt;&lt;strong&gt;Quick &amp; readable Nanopublications&lt;br/&gt;with Markdown-LD\") --&gt; happiness\n\n    cbor-ld-nanopub(\"Nanopublish &lt;code&gt;CBOR-LD&lt;/code&gt;&lt;br/&gt;with manual LLM cycle\") --&gt; lots-of-pubs(\"Publish lots of nanopublications!\") --&gt; nanopub-blog-post\n\n    cbor-ld-nanopub --&gt; auto-llm-cycle(\"Automate LLM feedback cycle\")\n    discover(\"Discover LD notions about a free language statement\") --&gt; auto-llm-cycle --&gt; extension(\"Can this be an editor extension?\")\n    auto-llm-cycle --&gt; iolanta-mcp(\"Iolanta MCP describes a nanopub\")\n    auto-llm-cycle --&gt; discovery-mcp(\"Discovery MCP discovers LD based on free form text\")\n    click cbor-ld-nanopub \"https://github.com/iolanta-tech/iolanta/issues/309\"\n\n    in-cloud(\"Run Iolanta in cloud\") --&gt; nanopub-blog-post\n\n    nanopub-blog-post\n    click np-fork-out-of-date \"https://github.com/iolanta-tech/nanopub-py\"\n    class np-fork-out-of-date bug\n\n    plan-yaml-ld-to-pyld(\"Start moving stuff:&lt;br/&gt;Python &lt;code&gt;yaml-ld&lt;/code&gt; \u2192 &lt;code&gt;pyld&lt;/code&gt;\") --&gt; happiness\n\n    foaf-title(\"FOAF Title facet&lt;br/&gt;only reacts on &lt;code&gt;foaf:Person&lt;/code&gt; class\") --&gt; happiness\n    publish-with-mkdocs(\"Publish LD&lt;br/&gt;@ &lt;code&gt;mkdocs-iolanta&lt;/code&gt;\") --&gt; happiness\n    class foaf-title bug\n\n    tex(\"Embed an Iolanta visualization into a LaTeX document\") --&gt; happiness\n    tractatus(\"Tractatus Logico-Philosophicus \u2192 LD\") --&gt; happiness\n\n    starts-from-console(\"Iolanta starts with a blank console\") --&gt; happiness\n    class starts-from-console bug\n\n    subgraph \"YAML-LD nanopublication on the front page\"\n        direction LR\n        nanopublication-is-not-satisfactory(\"Nanopublication on front page&lt;br/&gt;is not satisfactory\")\n        class nanopublication-is-not-satisfactory bug\n\n        literal-clickable(\"YAML-LD literal is clickable\") --&gt; nanopublication-is-not-satisfactory\n        click literal-clickable \"https://github.com/iolanta-tech/iolanta/issues/260\"\n        class literal-clickable bug\n    end\n\n    spec-not-ld --&gt; happiness\n\n    facet-and-widget(\"Merge Facet \u2192 Widget?\") --&gt; happiness\n\n    subgraph \"YAML-LD spec\"\n        spec-not-ld(\"Spec exposes too little LD\")\n        class spec-not-ld bug\n\n        mismatch(\"Browsing &lt;code&gt;spec/data/spec.yaml&lt;/code&gt;&lt;br/&gt;\u2260 browsing the spec on the web\") --&gt; spec-not-ld\n        class mismatch bug\n\n        last-loaded-time(\"&lt;code&gt;iolanta:last-loaded-time&lt;/code&gt;&lt;br/&gt;is not rendered\") --&gt; spec-not-ld\n        class last-loaded-time bug\n\n        spec-toc(\"Spec does not have a table of contents\") --&gt; spec-not-ld\n        class spec-toc bug\n\n        more(\"Invent more things&lt;br/&gt;to add to the YAML-LD representation&lt;br/&gt;of the spec\") --&gt; spec-not-ld\n    end\n\n    nanopublication-is-not-satisfactory --&gt; nanopub-blog-post\n\n    python-yaml-ld-markdown-ld(\"\u2795 Markdown-LD parser&lt;br/&gt;@ &lt;code&gt;python-yaml-ld&lt;/code&gt;\") --&gt; markdown-ld(\"Edit a Markdown-LD document\") --&gt; markdown-nanopub-blog-post\n    click markdown-ld \"https://github.com/iolanta-tech/iolanta/issues/261\"\n    markdown-ld --&gt; no-data(\"iolanta.tech/is-preferred-over&lt;br/&gt;no data found\") --&gt; nanopub-blog-post\n    class no-data bug\n\n    generate-facets-list(\"Generate Facets list\") --&gt; happiness\n    click generate-facets-list \"/Facet/\"\n\n    comunica-np(\"&lt;code&gt;comunica-sparql-link-traversal&lt;/code&gt;&lt;br/&gt;cannot retrieve properties&lt;br/&gt;about a nanopub\") --&gt;  use-comunica(\"Replace &lt;code&gt;CyberspaceSPARQLProcessor&lt;/code&gt;&lt;br/&gt;\u2192 &lt;code&gt;comunica-sparql-link-traversal&lt;/code&gt;\") --&gt; happiness\n\n    np-create(\"Get &lt;code&gt;np create&lt;/code&gt;&lt;br/&gt;released\") --&gt; happiness\n\n    class comunica-anything bug\n    class comunica-np bug\n\n    sparqlspace-cli(\"&lt;code&gt;sparqlspace&lt;/code&gt; CLI\") --&gt; happiness\n    sparqlspace-query-plugin(\"Query-based\") --&gt; sparqlspace-cli\n    sparqlspace-results-plugin(\"Result-based\") --&gt; sparqlspace-cli\n    sparqlspace-disk(\"&lt;code&gt;sparqlspace&lt;/code&gt;&lt;br/&gt;loads files from disk\") --&gt; sparqlspace-cli\n    sparqlspace-protect-meta(\"&lt;code&gt;sparqlspace&lt;/code&gt;&lt;br/&gt;protects &lt;code&gt;_meta&lt;code&gt;&lt;/br&gt;graph\") --&gt; sparqlspace-cli\n\n    facet-with-data(\"Register a facet class&lt;br/&gt;together with its associated LD\") --&gt; happiness\n\n    tables(\"Render tables&lt;br/&gt;from multiple LD files\") --&gt; happiness\n\n    sparqlspace-integration-tests(\"&lt;code&gt;sparqlspace&lt;/code&gt;has no&lt;br/&gt;integration tests\") --&gt; happiness\n    class sparqlspace-integration-tests bug\n\n    declension-nanopubs(\"\u2795 Declension nanopub(s)\")\n      --&gt; declension-facet(\"\u2795 Declension facet\")\n      --&gt; iolanta-declension(\"\u2795 &lt;code&gt;iolanta-declension&lt;/code&gt;&lt;br/&gt;plugin\") --&gt; happiness\n\n    pyld-fails-on-lexinfo(\"&lt;code&gt;pyld&lt;/code&gt; fails on &lt;a href='http://www.lexinfo.net/ontology/2.0/lexinfo#'&gt;lexinfo&lt;/a&gt;\") --&gt; armenian-pronouns(\"Armenian pronouns&lt;br/&gt;nanopub\") --&gt; happiness\n    class pyld-fails-on-lexinfo bug\n\n    facet-context(\"\u2795 Facet Context\") --&gt; happiness\n    title-facet-dynamic-query(\"&lt;code&gt;TitleFacet&lt;/code&gt; should compose query dynamically\") --&gt; happiness\n    as-mermaid(\"&lt;code&gt;--as mermaid&lt;/code&gt; does not work\") --&gt; happiness\n    class as-mermaid bug\n\n    mermaid-page(\"iolanta.tech/datatypes/mermaid missing\") --&gt; happiness\n    class mermaid-page bug\n\n    blog-howto(\"Maybe make Howto just a tag in Blog?\") --&gt; happiness\n\n    blank-node-failing(\"Blank node does not render\")\n      --&gt; declension-facet\n\n    class blank-node-failing bug\n\n    declension-facet(\"Implement &lt;code&gt;declension&lt;/code&gt; facet\")\n      --&gt; iolanta-declension\n\n    main-topic-of-assertion(\"Specify main topic of assertion\")\n      --&gt; howto-facet\n\n    jyp-outdated(\"&lt;code&gt;jeeves-yeti-pyproject&lt;/code&gt;&lt;br/&gt;outdated\")\n      --&gt; iolanta-declension(\"&lt;code&gt;pip install iolanta-declension&lt;/code&gt;\")\n      --&gt; howto-facet(\"HOWTO &lt;strong&gt;Make your own facet&lt;/strong&gt;\")\n      --&gt; happiness\n\n    class jyp-outdated bug\n\n    classDef bug fill:#700,stroke:#f00,stroke-width:1px;</code></pre> <p>Or, maybe you want to help achieve happiness with code?</p> <p>Thank you, and see  issues!</p>"},{"location":"when-no-facet-found/","title":"\ud83d\udcdb <code>when-no-facet-found</code>","text":"<ul> <li> <p> Domain</p> <p><code>rdfs:Datatype</code> Datatype of the value the facet returns</p> </li> <li> <p> Range</p> <p><code>iolanta:Facet</code> Iolanta visualization</p> </li> </ul> <p>No facet is found to visualize this <code>URI</code> in the form of this <code>datatype</code>. A pityful occasion. We could throw an ugly exception in this situation, or show a hard-coded error message; but instead let's specify a specially crafted facet which will provide a user friendly placeholder. That's what this property is for.</p>"},{"location":"blog/","title":"Blog","text":"<p>{{ blog_content }}</p>"},{"location":"blog/avoid-rdfs-duplicates/","title":"Avoid duplicate RDFS ontologies by \u2026","text":"","tags":["decision"]},{"location":"blog/avoid-rdfs-duplicates/#context","title":"Context","text":"<p>Due to  a bug in OWL2, we've got two URLs claiming to be ontologies:</p> <ul> <li>https://www.w3.org/2000/01/rdf-schema</li> <li>https://www.w3.org/2000/01/rdf-schema#</li> </ul> <p>Also</p> <p>A similar predicament exists for OWL ontology itself. We've got two URLs: with and without the  sign.</p> <p>What alternatives do we have?</p> <ul> <li> <p> Filter <code>owl:Ontology</code> instance list by <code>rdfs:isDefinedBy</code> links</p> <p>Only show ontologies which define at least one term.</p> <p>This does not solve the OWL problem.</p> </li> <li> <p> Rewrite URLs while loading them</p> <p>Replace <code>\u2026owl</code> with <code>\u2026owl#</code>.</p> </li> </ul>","tags":["decision"]},{"location":"blog/avoid-rdfs-duplicates/#decision","title":"Decision","text":"<p>Rewrite URLs.</p>","tags":["decision"]},{"location":"blog/avoid-rdfs-duplicates/#consequences","title":"Consequences","text":"<p>\u2795 Should resolve both problems at once.</p>","tags":["decision"]},{"location":"blog/call-provenance-page/","title":"Call Provenance page with \u2026","text":""},{"location":"blog/call-provenance-page/#context","title":"Context","text":"<p>If we Alt + Click on a link we should see provenance page for the IRI symbolized by that link, or for a triple associated with it.</p>"},{"location":"blog/call-provenance-page/#alternatives","title":"Alternatives","text":"<ul> <li><code>[@click=app.goto({argument})]</code></li> <li><code>\u2026</code> is the pure IRI,</li> <li><code>\u2026</code> is a combination of the IRI and its triple for provenance purposes,</li> <li><code>\u2026</code> is an ID by which such a combination can be found,</li> <li>Individual mechanism per facet</li> <li>Bubble an event, and the first facet capable will handle it (which is way too assuming cooperation, really)</li> </ul>"},{"location":"blog/call-provenance-page/#decision","title":"Decision","text":"<p>\u2026</p>"},{"location":"blog/call-provenance-page/#consequences","title":"Consequences","text":"<p>\u2026</p>"},{"location":"blog/communication-directions/","title":"Linked Data is a communication system among \ud83e\uddd1 humans &amp; \ud83e\udd16 machines","text":"From To Examples \ud83e\uddd1 Human \ud83e\uddd1 Human dbpedia \u00b7                 wikidata \u00b7                 metaphacts \u00b7                 \u2026 \u00b7                 iolanta \ud83e\udd16 Machine \ud83e\uddd1 Human \ud83e\udd16 Machine Turtle/N3 \u00b7                 YAML-LD \u00b7                 \u2026              \ud83e\udd16 Machine \ud83e\udd16 Machine JSON-LD \u00b7                 RDF/XML \u00b7                 LDP \u00b7                 \u2026"},{"location":"blog/create-blog/","title":"Start Iolanta Blog","text":"","tags":["decision"]},{"location":"blog/create-blog/#context","title":"Context","text":"<p>Over the development of the project, we need to track:</p> <ul> <li>Decisions,</li> <li>Use cases,</li> <li>Theoretical discussions regarding the project direction and its reasoning.</li> </ul>","tags":["decision"]},{"location":"blog/create-blog/#decision","title":"Decision","text":"<p>Post all of that into Blog with appropriate tags.</p>","tags":["decision"]},{"location":"blog/create-blog/#consequences","title":"Consequences","text":"<ul> <li>There will be no question where, among multiple sections of the site, to post new documents;</li> <li>Blog will also be a playground for structured communication;</li> <li>Other projects I am involved with will not be scattering my efforts regarding that.</li> </ul>","tags":["decision"]},{"location":"blog/deagentize-social-networks/","title":"De-agentize social networks","text":"","tags":["decision"]},{"location":"blog/deagentize-social-networks/#problem","title":"Problem","text":"<p>In any discussion held on a social network, such as  Facebook,  (n\u00e9e  Twitter) or any other, even though only two persons are conversing, the network itself is an uninvited participant. Indeed, the members of a discussion:</p> <ul> <li> Are under influence of feed algorithms</li> <li> Can face intervention from the network</li> <li> Including forms of censorship</li> </ul>","tags":["decision"]},{"location":"blog/deagentize-social-networks/#incentive-misalignment","title":"Incentive misalignment","text":"<p>There is an inherent conflict of interests between me, as a social network user, and the network itself as an agent.</p> <p>For instance, a heated conversation with verbal abuse on the verge of ban is arguably a good thing for the network: it drives engagement; it is a bad thing for me though because, being angry and annoyed, I will hardly manage to judge rationally.</p>","tags":["decision"]},{"location":"blog/deagentize-social-networks/#solution","title":"Solution","text":"<p>To resolve the conflict of interests, I would like to disembody the social network and strip it of any interests of its own. My text editor doesn't have those, right? Why would my communication system have them then?</p> <ul> <li> <p> Open source</p> <p>An interested agent, human or otherwise, should be able to read the code and see what their communication system is doing under the hood.</p> </li> <li> <p> Local First</p> <p>The user could choose to rely upon a cloud service provider, or rent a server, or use their own computer only, -- but ultimately the choice belongs to the user.</p> </li> </ul>","tags":["decision"]},{"location":"blog/deagentize-social-networks/#decision","title":"Decision","text":"<p>When considering social communication systems which might be considered alternatives to Iolanta, only look at open source and local-first systems.</p>","tags":["decision"]},{"location":"blog/find-facets-by-sparql-templates/","title":"Find facets by SPARQL patterns","text":"<p>I need to be able to call <code>PropertyPairsFacet</code> for each node which appears in a predicate position. The facet will render all subject-object pairs for this property as a table.</p>  Decision: Use SPARQL SHACL SHACL-SPARQL <pre><code>$id: pkg:pypi/iolanta#textual-property-pairs\niolanta:outputs: datatypes:textual\niolanta:pattern: ASK { ?subject $this ?object }\n</code></pre>"},{"location":"blog/find-facets-by-sparql-templates/#consequences","title":"Consequences","text":"<p>"},{"location":"blog/find-facets-by-sparql-templates/#pro","title":"Pro","text":"<ul> <li>Simple and clear implementation</li> <li>No dependency on SHACL processing overhead  <p>Not supported by SHACL Core:</p> <p>SHACL Core includes the following kinds of targets: node targets, class-based targets (including implicit class-based targets), subjects-of targets, and objects-of targets.</p> <p>There are no <code>predicates-as</code> targets, as we can see.</p> Courtesy of ChatGPT<pre><code>$id: https://example.com/shapes/PredicateNodeShape\n$type: sh:NodeShape\nsh:sparql:\n  $type: sh:SPARQLConstraint\n  sh:message: \"Node must appear in predicate position.\"\n  sh:ask: |-\n    ASK {\n      ?subject $this ?object .\n    }\n</code></pre> <p>If we have to use SPARQL anyway then I do not see the need to employ SHACL as an intermediate layer wrapping it.</p>"},{"location":"blog/find-facets-by-sparql-templates/#contra","title":"Contra","text":"<ul> <li>Patterns are not Linked Data<ul> <li>And therefore cannot be easily reused and extended</li> <li> But this can be amended later by support for a RDF based SPARQL serialization  </li> </ul> </li> </ul>"},{"location":"blog/flip-menu/","title":"Use bottom menu to flip facets","text":""},{"location":"blog/flip-menu/#context","title":"Context","text":"<p>We need some way to flip from one facet to another, regardless of the implementation of the facet itself.</p>"},{"location":"blog/flip-menu/#decision","title":"Decision","text":"<p>Display alternative facets in the bottom menu.</p>"},{"location":"blog/flip-menu/#consequences","title":"Consequences","text":""},{"location":"blog/flip-menu/#pro","title":"Pro","text":"<ul> <li>Easy to implement, no extra widgets needed</li> </ul>"},{"location":"blog/flip-menu/#contra","title":"Contra","text":"<ul> <li>Might be too many facets there</li> <li>There are not that many facets right now, we do not care so far</li> <li>Later we can expand this to a special menu or whatever</li> </ul>"},{"location":"blog/flip/","title":"Flip","text":""},{"location":"blog/flip/#context","title":"Context","text":"<p>I need to flip between facets when looking at the same node.</p> <p>A few changes needed for that.</p> <pre><code>graph TD\n    env-to-type(\"&lt;code&gt;environment&lt;/code&gt; \u2192 &lt;code&gt;rdfs:Datatype&lt;/code&gt;\") --&gt; subtypes(\"Subtypes&lt;br/&gt;&lt;em&gt;Anything there already?&lt;/em&gt;\") --&gt; generic(\"Generic types\")\n    subtypes --&gt; dependent(\"Dependent/parametric types\") --&gt; propagate(\"Propagate params downward?\") \n    env-to-type --- no-viewpoints(\"Viewpoints&lt;br/&gt;no longer needed!\")\n    subtypes --&gt; json(\"Use &lt;code&gt;rdf:JSON&lt;/code&gt;!\")\n    subtypes --&gt; mro(\"Multiple inheritance?\")\n\n    subtypes --&gt; widget(\"&lt;code&gt;TextualWidget&lt;/code&gt;\")\n    click widget \"https://textual.textualize.io/guide/widgets/\"\n\n    widget --\"is supertype of\"--&gt;full-screen(\"&lt;code&gt;TextualFullScreenWidget&lt;/code&gt;\")\n\n    full-screen --&gt; downward(\"Target type: search downward\")\n    full-screen --&gt; upward(\"hasInstanceFacet: search upward&lt;br/&gt;or just rely upon OWL\")\n\n    env-to-type --&gt; facet-url(\"URL encapsulating the facet to use\") --&gt; flip(\"[f] Flip menu\")\n    facet-url --&gt; facet-parameters(\"How does facet know rendering/type params???\")\n    facet-parameters --&gt; table(\"Want to render countries as table\")\n    table --&gt; viewpoint(\"Table is a viewpoint node, we render it\")\n    table --&gt; table-type(\"Table is a type\")\n</code></pre>"},{"location":"blog/flip/#decision","title":"Decision","text":"<ul> <li> Create and call a Flip page to list all applicable facets</li> <li> Run specific facet on click</li> <li> And then work on env \u2192 type migration</li> </ul>"},{"location":"blog/group-terms-by/","title":"Group an ontology terms by a property","text":"","tags":["decision"]},{"location":"blog/group-terms-by/#context","title":"Context","text":"<p>Ontology facet displays terms of a given ontology in groups, and we need a method to specify how to group those terms.</p>","tags":["decision"]},{"location":"blog/group-terms-by/#decision","title":"Decision","text":"<ul> <li>Each group in the display should be an <code>rdfs:Class</code> which the terms should belong to;</li> <li><code>owl:Ontology</code> connects to each class via a special property.</li> </ul>","tags":["decision"]},{"location":"blog/group-terms-by/#consequences","title":"Consequences","text":"<ul> <li>Each grouping class can have an <code>rdfs:label</code>, and other properties usable for visualization;</li> <li>Not each such class is necessarily a grouping, so the special property we mentioned above will specify which particular classes will be used for the grouping.</li> </ul>","tags":["decision"]},{"location":"blog/group-terms-by/#follow-up-adrs","title":"\u21d2 Follow-up ADRs","text":"<ul> <li>Use vann:termGroup for Ontology facet</li> </ul>","tags":["decision"]},{"location":"blog/is-referenced-by/","title":"Use <code>dcterms:isReferencedBy</code> to let Iolanta know where to fetch information about a thing","text":""},{"location":"blog/is-referenced-by/#why","title":"Why","text":"<p>Sometimes, a URI that describes something is, by itself, not resolvable. For instance, W3C License is specified by</p> <pre><code>https://purl.org/NET/rdflicense/W3C1.0\n</code></pre> <p>but resolving this URL won't return anything. In this case, you can use <code>dcterms:isReferencedBy</code> to point to a document that describes the thing.</p>"},{"location":"blog/is-referenced-by/#how","title":"How","text":"<pre><code>\"@context\":\n  \"@import\": https://json-ld.org/contexts/dollar-convenience.jsonld\n  dcterms: http://purl.org/dc/terms/\n\n  dcterms:isReferencedBy:\n    \"@type\": \"@id\"\n\n$id: https://purl.org/NET/rdflicense/W3C1.0\ndcterms:isReferencedBy: https://purl.org/NET/rdflicense/W3C1.0.ttl\n</code></pre> <p>Whenever Iolanta encounters the URI of W3C 1.0 license it will retrieve the specified Turtle document which provides information about it.</p>"},{"location":"blog/knowledge-base-evolution/","title":"Knowledge Base Evolution","text":"<p>Knowledge as code is written in a simple text format in a natural language, potentially with pieces expressed in a formal language.</p> <p>Natural language pieces can be written in Markdown, as a simple and widespread format.</p> <p>Formal language pieces can be written in YAML-LD.</p> <p>Generative AI tools can understand both natural and formal language pieces.</p> <p>Deterministic programs can mostly only understand formal language expressions.</p> <p>Evolution of a knowledge base might start from a bunch of Markdown files with minimal formalization. As soon as clear use cases for formalization emerge, these files can be enriched with formalized content, upon which generalizations and representations might emerge.</p> <p>Generative AI tools might assist with conversion from natural language to a formal one.</p>"},{"location":"blog/ld-is-about-speed/","title":"Linked Data is about speed of change to knowledge preserving its consistency","text":""},{"location":"blog/ld-is-about-speed/#if-the-knowledge-would-never-change","title":"If the knowledge would never change","text":"<p>Then we would have written associations from one dataset to another as a set of Excel tables. But that would be very hard to maintain. Because knowledge changes.</p>"},{"location":"blog/ld-is-about-speed/#this-is-a-framework-to-think-about-use-cases","title":"This is a framework to think about use cases","text":"<p>We can reason about tooling necessary for a particular use case, and use, or not use LD for it.</p>"},{"location":"blog/p-for-provenance/","title":"Do \u2026 to see provenance","text":"","tags":["decision"]},{"location":"blog/p-for-provenance/#context","title":"Context","text":"<p>When we see a statement in Iolanta a very basic operation would be to understand where that statement comes from. For instance, if RDFS ontology contains <code>rdfs:seeAlso</code> then who said it does? The RDFS itself or it was a mistake from some other source?</p>","tags":["decision"]},{"location":"blog/p-for-provenance/#provenance-mode","title":"Provenance Mode","text":"<p>Provenance Mode is a mode in the UI which is focused on provenance, on understanding the source of each statement. This deserves its own mode because, in the light of the AAA principle (Anyone can say Anything about Any subject), it is of paramount importance to see where each piece of information comes from.</p> <p>In Provenance mode, each link displayed in the UI must point to a piece of provenance information about something. Click or <code>Enter</code> on a link will lead to a page with such information.</p> <p>In normal mode, a piece of text might not be a link; in Provenance mode, it will become one, to show where this piece of text arrived.</p> <p>Vice versa, something that's a link in normal mode can become plain text in Provenance mode if provenance for it is not applicable.</p> <p>How to switch to, and from, Provenance Mode? We've got alternatives.</p>","tags":["decision"]},{"location":"blog/p-for-provenance/#press-hold-alt","title":"Press &amp; hold <code>Alt</code>","text":"<p>Provenance Mode will be active while <code>Alt</code> key is held.</p>","tags":["decision"]},{"location":"blog/p-for-provenance/#press-release-p","title":"Press &amp; release <code>P</code>","text":"<p>This will switch to Provenance mode or back to Normal mode.</p>","tags":["decision"]},{"location":"blog/p-for-provenance/#decision","title":"Decision","text":"<p>Implement Provenance Mode Toggle with <code>P</code> Key: - Pressing and releasing the <code>P</code> key will switch to Provenance Mode. Pressing <code>P</code> again will return to Normal Mode.</p>","tags":["decision"]},{"location":"blog/p-for-provenance/#consequences","title":"Consequences","text":"","tags":["decision"]},{"location":"blog/p-for-provenance/#pros","title":"Pros:","text":"<ol> <li>Ease of Use: Users can easily switch modes with a simple key press, making it intuitive and accessible.</li> <li>Toggle Flexibility: The toggle allows users to remain in Provenance Mode without holding down a key, reducing finger strain during longer sessions.</li> <li>Consistency: The <code>P</code> key is easy to remember (<code>P</code> for Provenance), aligning with standard keyboard shortcuts.</li> <li>No Conflict: This solution avoids conflicts with other potential keyboard shortcuts that might be used for navigation or other UI actions.</li> </ol>","tags":["decision"]},{"location":"blog/p-for-provenance/#cons","title":"Cons:","text":"<ol> <li>Mode Confusion: Users might forget which mode they're in, leading to potential confusion, especially if the visual indicators of mode change are subtle.</li> <li>Accidental Activation: Users might accidentally switch modes if they press <code>P</code> unintentionally, potentially disrupting their workflow.</li> <li>Mode Persistence: If users frequently need to check provenance and then revert to normal viewing, the toggle may require extra key presses compared to a press-and-hold approach, slightly reducing efficiency.</li> </ol>","tags":["decision"]},{"location":"blog/parse-json-ld-with-pyld/","title":"Parse JSON-LD with  <code>digitalbazaar/pyld</code>","text":"","tags":["decision"]},{"location":"blog/parse-json-ld-with-pyld/#context","title":"Context","text":"<p>We need to parse JSON-LD files from the Web and local filesystems.</p> Alternative Contra Use <code>rdflib</code>'s native JSON-LD parser <code>rdflib</code> is planning to switch to <code>pyld</code>:  <code>rdflib/rdflib#2308</code> Use <code>pyld</code> via <code>rdflib</code> when <code>rdflib</code> does the transition Will take some time, I suppose Call <code>pyld</code> by hand and feed results \u2192 <code>rdflib</code> \u2205","tags":["decision"]},{"location":"blog/parse-json-ld-with-pyld/#decision","title":"Decision","text":"<p>Call <code>pyld</code> by hand and feed results \u2192 <code>rdflib</code></p>","tags":["decision"]},{"location":"blog/parse-json-ld-with-pyld/#consequences","title":"Consequences","text":"<ul> <li>When <code>rdflib</code> switches to use <code>pyld</code> we will be able to simplify our code.</li> </ul>","tags":["decision"]},{"location":"blog/popup-notification-about-syntax-errors/","title":"Context","text":"<p>Iolanta automatically reloads YAML-LD files upon changes. If the file contains a syntax error, Iolanta silently ignores it, leading to an empty or misleading view. Currently, the only way to diagnose such errors is by opening the console (F12), which is not an ideal user experience.</p> <p>Several approaches to surface syntax errors have been considered:</p> <ol> <li>Modifying Existing Facets: Each facet (e.g., Properties, Inverse Properties, Graph Triples) would need to handle syntax errors separately, displaying an explicit error message instead of their usual content.</li> <li>Creating a Special \"Syntax Error\" Facet: When a syntax error is detected, Iolanta would display this facet as an option in the status bar.</li> <li>Displaying a Popup Notification: A notification widget would appear in the bottom right corner of the screen whenever a syntax error occurs.</li> </ol>"},{"location":"blog/popup-notification-about-syntax-errors/#decision","title":"Decision","text":"<p>Iolanta will display a popup notification when it encounters a syntax error in the YAML-LD file. This notification will be a standard Textual widget and will appear in the bottom right corner of the screen.</p>"},{"location":"blog/popup-notification-about-syntax-errors/#consequences","title":"Consequences","text":""},{"location":"blog/popup-notification-about-syntax-errors/#pro","title":"Pro","text":"<ul> <li>Immediate visibility: The error is surfaced without requiring user action (e.g., switching facets or opening the console).</li> <li>Non-intrusive: The popup does not interfere with existing facets or workflows.</li> <li>Consistency: Centralizes error handling in a single mechanism instead of modifying multiple facets.</li> <li>Ease of implementation: Textual provides built-in support for notifications, simplifying the implementation.</li> </ul>"},{"location":"blog/popup-notification-about-syntax-errors/#contra","title":"Contra","text":"<ul> <li>Transient nature: If the notification disappears too quickly, users might miss it.</li> <li>Potential distraction: If errors occur frequently, popups may become an annoyance.</li> <li>No persistent log: Unlike the console, the popup does not retain a history of past errors.</li> </ul> <p>To mitigate these issues, a configurable timeout for the notification duration may be introduced, and the error could optionally be logged for later retrieval.</p>"},{"location":"blog/rational-decisions/","title":"Make decisions rationally","text":"","tags":["decision"]},{"location":"blog/rational-decisions/#context","title":"Context","text":"<p>When faced with a need to make a decision, a conscious agent might choose one of the following strategies.</p> <ul> <li> <p> Choose randomly</p> <p>Choose a random alternative and hope for the best. In a population of agents large enough, someone will be lucky enough to survive.</p> </li> <li> <p> Imitate</p> <p>Copy a solution taken by another agent, maybe the leader of the group, maybe someone old enough to have experience in similar predicaments.</p> </li> <li> <p> Reason</p> <p>Build a model of the situation and try to rationally deduce the optimal course of action.</p> </li> </ul>","tags":["decision"]},{"location":"blog/rational-decisions/#decision","title":"Decision","text":"<p>Lean towards rational decision making whenever possible.</p>","tags":["decision"]},{"location":"blog/rational-decisions/#consequences","title":"Consequences","text":"","tags":["decision"]},{"location":"blog/rational-decisions/#pro","title":"Pro","text":"<ul> <li>Probability for success:<ul> <li>much higher than for a random choice,</li> <li>often higher than for imitation;</li> </ul> </li> <li>Capable of long term optimization;</li> <li>Capable of finding paths on the fitness landscape beyond local optima</li> </ul>","tags":["decision"]},{"location":"blog/rational-decisions/#contra","title":"Contra","text":"<ul> <li>Expensive in terms of time and effort,<ul> <li>which leads to inherently bounded rationality,</li> <li>but can be corrected by technology.</li> </ul> </li> </ul>","tags":["decision"]},{"location":"blog/render-mermaid-diagram/","title":"Render Mermaid diagram in MkDocs using <code>\u2026|as('mermaid')</code> filter","text":"","tags":["decision"]},{"location":"blog/render-mermaid-diagram/#context","title":"Context","text":"<p>We have a YAML-LD file, called <code>yaml-ld.yamlld</code>, in our Mkdocs directory. We need to render it as a Mermaid diagram and insert into a page using <code>mkdocs-macros-plugin</code>. What syntax should we use?</p>","tags":["decision"]},{"location":"blog/render-mermaid-diagram/#customization","title":"Customization","text":"<p>If we are going to do any customization of the diagram, we will do that in YAML-LD, not in the page itself.</p>","tags":["decision"]},{"location":"blog/render-mermaid-diagram/#alternatives","title":"Alternatives","text":"<code>\u2026|as('mermaid')</code> filter <code>mermaid(\u2026)</code> function <code>\u2026|mermaid</code> filter <pre><code>{{ \"yaml-ld.yamlld\"|as('mermaid') }}\n</code></pre> <p>","tags":["decision"]},{"location":"blog/render-mermaid-diagram/#pro","title":"Pro","text":"<ul> <li>Still simple syntax</li> <li>Is reusable in other contexts  <pre><code>{{ mermaid(\"yaml-ld.yamlld\") }}\n</code></pre> <p>","tags":["decision"]},{"location":"blog/render-mermaid-diagram/#contra","title":"Contra","text":"<ul> <li>Might be more complicated to use  </li> </ul>","tags":["decision"]},{"location":"blog/render-mermaid-diagram/#pro_1","title":"Pro","text":"<ul> <li>Simple syntax  <pre><code>{{ \"yaml-ld.yamlld\"|mermaid }}\n</code></pre> <p>","tags":["decision"]},{"location":"blog/render-mermaid-diagram/#contra_1","title":"Contra","text":"<ul> <li>No control over the diagram</li> <li>Necessity to invent a new function for each new visualization beyond Mermaid  </li> </ul>","tags":["decision"]},{"location":"blog/render-mermaid-diagram/#pro_2","title":"Pro","text":"<ul> <li>Simple syntax","tags":["decision"]},{"location":"blog/render-mermaid-diagram/#contra_2","title":"Contra","text":"<ul> <li>No control over the diagram</li> <li>Necessity to invent a new filter for each new visualization beyond Mermaid  </li> </ul>","tags":["decision"]},{"location":"blog/render-mermaid-diagram/#example","title":"Example","text":"<pre><code>graph LR\n  https___json-ld_github_io_yaml-ld_spec(\"YAML-LD\")\n  click https___json-ld_github_io_yaml-ld_spec \"https://json-ld.github.io/yaml-ld/spec/\"\n  Literal-5cc294277266dd585fb000bcc3b0dc5d[[\"A set of conventions built on top of YAML, which outlines how to serialize\n  Linked Data as YAML based on JSON-LD syntax, semantics, and APIs.\n  \"]]\n  https___json-ld_github_io_yaml-ld_spec(\"YAML-LD\")\n  click https___json-ld_github_io_yaml-ld_spec \"https://json-ld.github.io/yaml-ld/spec/\"\n  https___w3id_org_fair_fip_terms_Knowledge-representation-language(\"Knowledge representation language\")\n  click https___w3id_org_fair_fip_terms_Knowledge-representation-language \"https://w3id.org/fair/fip/terms/Knowledge-representation-language\"\n  https___json-ld_github_io_yaml-ld_spec --- 47c279524a4d90fad264e6da66581a76([\"Description\"])--&gt; Literal-5cc294277266dd585fb000bcc3b0dc5d\n  click 47c279524a4d90fad264e6da66581a76 \"https://purl.org/dc/terms/description\"\n  class 47c279524a4d90fad264e6da66581a76 predicate\n  https___json-ld_github_io_yaml-ld_spec --- ea1b411a1ac6c1ba95fdd6fb0b3a6eba([\"type\"])--&gt; https___w3id_org_fair_fip_terms_Knowledge-representation-language\n  click ea1b411a1ac6c1ba95fdd6fb0b3a6eba \"https://www.w3.org/1999/02/22-rdf-syntax-ns#type\"\n  class ea1b411a1ac6c1ba95fdd6fb0b3a6eba predicate\n  classDef predicate fill:transparent,stroke:transparent,stroke-width:0px;</code></pre>","tags":["decision"]},{"location":"blog/social-media-impeding-rationality/","title":"Social media are impeding rationality","text":"<p>I believe that social media, as the primary method of communication between people, does not help them make decisions rationally, and will try to gather a few indications towards that statement.</p> <ul> <li> <p> Information overload</p> <p>The sheer amount of information a user faces on any social network I've seen and anyone's using, be it  Facebook,  (n\u00e9e  Twitter), is overwhelming. You can never reach the end of the feed even though you spend way too much time reading it.</p> </li> <li> <p> Bubbles</p> <ul> <li>To cope with huge volumes of information,</li> <li>and to avoid negative emotion,</li> </ul> <p>formation of bubbles is hard to avoid.</p> </li> <li> <p> No reasoning aid</p> <p>Theoretically, social networks could help promote reasoning in discussions by technical methods:</p> <ul> <li>Argument Mapping,</li> <li>Detection of known systematic fallacies,</li> <li>Promotion of certain common arguments the opponents can agree upon,</li> </ul> <p>but none of that is done, to my current knowledge.</p> </li> <li> <p> Low level of discussions</p> <p>My personal feeling is that discussions on social media are generally of extremely low quality.</p> <ul> <li>People will repeatedly reference statements which long ago have been disproven, and additional effort is required to reiterate on discussing them,</li> <li>Even the simplest, the crudest fallacies like ad hominem are used routinely.</li> </ul> </li> <li> <p> Polarization</p> <p>All of that seems to radicalize people; persons who seemed to be more or less willing to find a compromise will find themselves much more radical after a few web holy wars.</p> </li> <li> <p> Social network is an agent itself</p> <ul> <li>Attempts to regulate the tone of discussions,</li> <li>or to inject some rationality by slapping COVID or climate change related banners on any post which seems to be touching upon the subject,</li> </ul> <p>make the social network a privileged actor in all discussions on the platform, and absolute power corrupts absolutely.</p> <ul> <li>Oftentimes, users don't agree with the actions of the network,</li> <li>And even if they do, they feel annoyed seeing the same stupid banners about vaccination time and again, -- what are you going to try convincing me about next Mr Zuckerberg, that 2 + 2 = 4 or what?</li> </ul> </li> </ul> <p>Social media are poor tools for rational discussion and decision making, probably because these are not goals towards which social networks are incentivized.</p>","tags":["imho"]},{"location":"blog/title-file-type/","title":"Page for the <code>title</code> datatype is in Markdown with <code>script</code> tag","text":""},{"location":"blog/title-file-type/#context","title":"Context","text":"<p>I need the https://iolanta.tech/datatypes/title datatype page to expose LD data about the datatype it stands for:</p> <ul> <li><code>rdfs:subClassOf</code>,</li> <li><code>rdfs:label</code>,</li> <li><code>rdfs:description</code>,</li> </ul> <p>and such. I can achieve that by:</p> <ul> <li>Adding a <code>Link</code> HTTP header,</li> <li>Adding a <code>Link</code> meta tag,</li> <li>Or embedding the JSON/YAML-LD into a <code>&lt;script&gt;</code> tag on the page.</li> </ul> <p>3rd option sounds easiest, that is what I will in fact do.</p> <p>Now, how can I do it?</p> <ul> <li>Write it manually into the page content</li> <li>Generate it from the front matter somehow</li> <li>Generate it from a standalone YAML-LD file</li> </ul>"},{"location":"blog/title-file-type/#decision","title":"Decision","text":"<p>I'll do it manually for the time being.</p>"},{"location":"blog/title-file-type/#consequences","title":"Consequences","text":"<p>We'll automate this later if we survive.</p>"},{"location":"blog/use-reasonable-as-reasoner/","title":"Use ... as reasoner","text":""},{"location":"blog/use-reasonable-as-reasoner/#context","title":"Context","text":"<p>The whole application freezes while we are running OWL RL reasoning because that operation is CPU bound and threading does not work well with it.</p> <pre><code>graph LR\n    what(What do we do?) --&gt; another(\"Use another reasoner\")\n\n    another --&gt; reasonable(\"&lt;code&gt;reasonable&lt;/code&gt;\")\n    click reasonable \"https://github.com/gtfierro/reasonable\"\n    reasonable &lt;-- \"\u2795\" --- reasonable-python(\"Has Python bindings\")\n    reasonable &lt;-- \"\u2796\" --- reasonable-error(\"&lt;code&gt;BlankNodeIdParseError&lt;/code&gt;\") &lt;-- \"is solved with\" --- blank-node-format(\"Format blank nodes&lt;br/&gt;without special characters\")</code></pre>"},{"location":"blog/use-reasonable-as-reasoner/#decision","title":"Decision","text":"<p>Use <code>reasonable</code>.</p>"},{"location":"blog/use-reasonable-as-reasoner/#consequences","title":"Consequences","text":""},{"location":"blog/use-reasonable-as-reasoner/#pro","title":"Pro","text":"<ul> <li>Much faster reasoning!</li> <li>No noticeable freezes</li> </ul>"},{"location":"blog/use-reasonable-as-reasoner/#contra","title":"Contra","text":"<ul> <li>Some triple duplications which we shall fix</li> </ul>"},{"location":"blog/use-vann-term-group/","title":"Use vann:termGroup for Ontology facet","text":"<p>Group an ontology terms by a property \u21d2</p>","tags":["decision"]},{"location":"blog/use-vann-term-group/#use-vanntermgroup-for-ontology-facet","title":"Use <code>vann:termGroup</code> for Ontology facet","text":"","tags":["decision"]},{"location":"blog/use-vann-term-group/#context","title":"Context","text":"<p>We need to choose a property to connect an <code>owl:Ontology</code> to each <code>rdfs:Class</code> which groups its terms.</p>","tags":["decision"]},{"location":"blog/use-vann-term-group/#decision","title":"Decision","text":"<p>Use <code>vann:termGroup</code> as a property that explicitly does what we need. I did not find anything besides that at LOV.</p>","tags":["decision"]},{"location":"blog/use-vann-term-group/#consequences","title":"Consequences","text":"<p>We will use an existing vocabulary and not invent bicycles.</p>","tags":["decision"]},{"location":"blog/2025-01-21-nanopublications/","title":"Navigating Cyberspace: Nanopublications Session","text":"<ul> <li>Nanopublications Sessions</li> <li>Slides</li> </ul>"},{"location":"blog/2025-01-21-nanopublications/slides/LICENSE/","title":"The MIT License","text":"<p>Copyright \u00a9 2010\u20132021 Vadim Makeev, http://pepelsbey.net/</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"blog/2025-01-21-nanopublications/slides/LICENSE/#mit","title":"\u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f MIT","text":"<p>Copyright \u00a9 2010\u20132021 \u0412\u0430\u0434\u0438\u043c \u041c\u0430\u043a\u0435\u0435\u0432, http://pepelsbey.net/</p> <p>\u0414\u0430\u043d\u043d\u0430\u044f \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044f \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u0442 \u043b\u0438\u0446\u0430\u043c, \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u043c \u043a\u043e\u043f\u0438\u044e \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0438 \u0441\u043e\u043f\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 (\u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0438\u043c\u0435\u043d\u0443\u0435\u043c\u044b\u043c\u0438 \u00ab\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435\u00bb), \u0431\u0435\u0437\u0432\u043e\u0437\u043c\u0435\u0437\u0434\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u0430\u0432\u043e \u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044e, \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u0435, \u0441\u0443\u0431\u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438/\u0438\u043b\u0438 \u043f\u0440\u043e\u0434\u0430\u0436\u0443 \u043a\u043e\u043f\u0438\u0439 \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f, \u0442\u0430\u043a\u0436\u0435 \u043a\u0430\u043a \u0438 \u043b\u0438\u0446\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u043e\u0435 \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435, \u043f\u0440\u0438 \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u0439:</p> <p>\u0423\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0432\u044b\u0448\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0431 \u0430\u0432\u0442\u043e\u0440\u0441\u043a\u043e\u043c \u043f\u0440\u0430\u0432\u0435 \u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u0432\u043e \u0432\u0441\u0435 \u043a\u043e\u043f\u0438\u0438 \u0438\u043b\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f.</p> <p>\u0414\u0410\u041d\u041d\u041e\u0415 \u041f\u0420\u041e\u0413\u0420\u0410\u041c\u041c\u041d\u041e\u0415 \u041e\u0411\u0415\u0421\u041f\u0415\u0427\u0415\u041d\u0418\u0415 \u041f\u0420\u0415\u0414\u041e\u0421\u0422\u0410\u0412\u041b\u042f\u0415\u0422\u0421\u042f \u00ab\u041a\u0410\u041a \u0415\u0421\u0422\u042c\u00bb, \u0411\u0415\u0417 \u041a\u0410\u041a\u0418\u0425-\u041b\u0418\u0411\u041e \u0413\u0410\u0420\u0410\u041d\u0422\u0418\u0419, \u042f\u0412\u041d\u041e \u0412\u042b\u0420\u0410\u0416\u0415\u041d\u041d\u042b\u0425 \u0418\u041b\u0418 \u041f\u041e\u0414\u0420\u0410\u0417\u0423\u041c\u0415\u0412\u0410\u0415\u041c\u042b\u0425, \u0412\u041a\u041b\u042e\u0427\u0410\u042f, \u041d\u041e \u041d\u0415 \u041e\u0413\u0420\u0410\u041d\u0418\u0427\u0418\u0412\u0410\u042f\u0421\u042c \u0413\u0410\u0420\u0410\u041d\u0422\u0418\u042f\u041c\u0418 \u0422\u041e\u0412\u0410\u0420\u041d\u041e\u0419 \u041f\u0420\u0418\u0413\u041e\u0414\u041d\u041e\u0421\u0422\u0418, \u0421\u041e\u041e\u0422\u0412\u0415\u0422\u0421\u0422\u0412\u0418\u042f \u041f\u041e \u0415\u0413\u041e \u041a\u041e\u041d\u041a\u0420\u0415\u0422\u041d\u041e\u041c\u0423 \u041d\u0410\u0417\u041d\u0410\u0427\u0415\u041d\u0418\u042e \u0418 \u041e\u0422\u0421\u0423\u0422\u0421\u0422\u0412\u0418\u042f \u041d\u0410\u0420\u0423\u0428\u0415\u041d\u0418\u0419 \u041f\u0420\u0410\u0412. \u041d\u0418 \u0412 \u041a\u0410\u041a\u041e\u041c \u0421\u041b\u0423\u0427\u0410\u0415 \u0410\u0412\u0422\u041e\u0420\u042b \u0418\u041b\u0418 \u041f\u0420\u0410\u0412\u041e\u041e\u0411\u041b\u0410\u0414\u0410\u0422\u0415\u041b\u0418 \u041d\u0415 \u041d\u0415\u0421\u0423\u0422 \u041e\u0422\u0412\u0415\u0422\u0421\u0422\u0412\u0415\u041d\u041d\u041e\u0421\u0422\u0418 \u041f\u041e \u0418\u0421\u041a\u0410\u041c \u041e \u0412\u041e\u0417\u041c\u0415\u0429\u0415\u041d\u0418\u0418 \u0423\u0429\u0415\u0420\u0411\u0410, \u0423\u0411\u042b\u0422\u041a\u041e\u0412 \u0418\u041b\u0418 \u0414\u0420\u0423\u0413\u0418\u0425 \u0422\u0420\u0415\u0411\u041e\u0412\u0410\u041d\u0418\u0419 \u041f\u041e \u0414\u0415\u0419\u0421\u0422\u0412\u0423\u042e\u0429\u0418\u041c \u041a\u041e\u041d\u0422\u0420\u0410\u041a\u0422\u0410\u041c, \u0414\u0415\u041b\u0418\u041a\u0422\u0410\u041c \u0418\u041b\u0418 \u0418\u041d\u041e\u041c\u0423, \u0412\u041e\u0417\u041d\u0418\u041a\u0428\u0418\u041c \u0418\u0417, \u0418\u041c\u0415\u042e\u0429\u0418\u041c \u041f\u0420\u0418\u0427\u0418\u041d\u041e\u0419 \u0418\u041b\u0418 \u0421\u0412\u042f\u0417\u0410\u041d\u041d\u042b\u041c \u0421 \u041f\u0420\u041e\u0413\u0420\u0410\u041c\u041c\u041d\u042b\u041c \u041e\u0411\u0415\u0421\u041f\u0415\u0427\u0415\u041d\u0418\u0415\u041c \u0418\u041b\u0418 \u0418\u0421\u041f\u041e\u041b\u042c\u0417\u041e\u0412\u0410\u041d\u0418\u0415\u041c \u041f\u0420\u041e\u0413\u0420\u0410\u041c\u041c\u041d\u041e\u0413\u041e \u041e\u0411\u0415\u0421\u041f\u0415\u0427\u0415\u041d\u0418\u042f \u0418\u041b\u0418 \u0418\u041d\u042b\u041c\u0418 \u0414\u0415\u0419\u0421\u0422\u0412\u0418\u042f\u041c\u0418 \u0421 \u041f\u0420\u041e\u0413\u0420\u0410\u041c\u041c\u041d\u042b\u041c \u041e\u0411\u0415\u0421\u041f\u0415\u0427\u0415\u041d\u0418\u0415\u041c.</p>"},{"location":"blog/2025-01-21-nanopublications/slides/shower/themes/material/LICENSE/","title":"The MIT License","text":"<p>Copyright \u00a9 2010\u20132019 Vadim Makeev, https://pepelsbey.dev/</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"blog/2025-01-21-nanopublications/slides/shower/themes/material/LICENSE/#mit","title":"\u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f MIT","text":"<p>Copyright \u00a9 2010\u20132019 \u0412\u0430\u0434\u0438\u043c \u041c\u0430\u043a\u0435\u0435\u0432, https://pepelsbey.dev/</p> <p>\u0414\u0430\u043d\u043d\u0430\u044f \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044f \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u0442 \u043b\u0438\u0446\u0430\u043c, \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u043c \u043a\u043e\u043f\u0438\u044e \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0438 \u0441\u043e\u043f\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 (\u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0438\u043c\u0435\u043d\u0443\u0435\u043c\u044b\u043c\u0438 \u00ab\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435\u00bb), \u0431\u0435\u0437\u0432\u043e\u0437\u043c\u0435\u0437\u0434\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u0430\u0432\u043e \u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044e, \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u0435, \u0441\u0443\u0431\u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438/\u0438\u043b\u0438 \u043f\u0440\u043e\u0434\u0430\u0436\u0443 \u043a\u043e\u043f\u0438\u0439 \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f, \u0442\u0430\u043a\u0436\u0435 \u043a\u0430\u043a \u0438 \u043b\u0438\u0446\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u043e\u0435 \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435, \u043f\u0440\u0438 \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u0439:</p> <p>\u0423\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0432\u044b\u0448\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0431 \u0430\u0432\u0442\u043e\u0440\u0441\u043a\u043e\u043c \u043f\u0440\u0430\u0432\u0435 \u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u0432\u043e \u0432\u0441\u0435 \u043a\u043e\u043f\u0438\u0438 \u0438\u043b\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f.</p> <p>\u0414\u0410\u041d\u041d\u041e\u0415 \u041f\u0420\u041e\u0413\u0420\u0410\u041c\u041c\u041d\u041e\u0415 \u041e\u0411\u0415\u0421\u041f\u0415\u0427\u0415\u041d\u0418\u0415 \u041f\u0420\u0415\u0414\u041e\u0421\u0422\u0410\u0412\u041b\u042f\u0415\u0422\u0421\u042f \u00ab\u041a\u0410\u041a \u0415\u0421\u0422\u042c\u00bb, \u0411\u0415\u0417 \u041a\u0410\u041a\u0418\u0425-\u041b\u0418\u0411\u041e \u0413\u0410\u0420\u0410\u041d\u0422\u0418\u0419, \u042f\u0412\u041d\u041e \u0412\u042b\u0420\u0410\u0416\u0415\u041d\u041d\u042b\u0425 \u0418\u041b\u0418 \u041f\u041e\u0414\u0420\u0410\u0417\u0423\u041c\u0415\u0412\u0410\u0415\u041c\u042b\u0425, \u0412\u041a\u041b\u042e\u0427\u0410\u042f, \u041d\u041e \u041d\u0415 \u041e\u0413\u0420\u0410\u041d\u0418\u0427\u0418\u0412\u0410\u042f\u0421\u042c \u0413\u0410\u0420\u0410\u041d\u0422\u0418\u042f\u041c\u0418 \u0422\u041e\u0412\u0410\u0420\u041d\u041e\u0419 \u041f\u0420\u0418\u0413\u041e\u0414\u041d\u041e\u0421\u0422\u0418, \u0421\u041e\u041e\u0422\u0412\u0415\u0422\u0421\u0422\u0412\u0418\u042f \u041f\u041e \u0415\u0413\u041e \u041a\u041e\u041d\u041a\u0420\u0415\u0422\u041d\u041e\u041c\u0423 \u041d\u0410\u0417\u041d\u0410\u0427\u0415\u041d\u0418\u042e \u0418 \u041e\u0422\u0421\u0423\u0422\u0421\u0422\u0412\u0418\u042f \u041d\u0410\u0420\u0423\u0428\u0415\u041d\u0418\u0419 \u041f\u0420\u0410\u0412. \u041d\u0418 \u0412 \u041a\u0410\u041a\u041e\u041c \u0421\u041b\u0423\u0427\u0410\u0415 \u0410\u0412\u0422\u041e\u0420\u042b \u0418\u041b\u0418 \u041f\u0420\u0410\u0412\u041e\u041e\u0411\u041b\u0410\u0414\u0410\u0422\u0415\u041b\u0418 \u041d\u0415 \u041d\u0415\u0421\u0423\u0422 \u041e\u0422\u0412\u0415\u0422\u0421\u0422\u0412\u0415\u041d\u041d\u041e\u0421\u0422\u0418 \u041f\u041e \u0418\u0421\u041a\u0410\u041c \u041e \u0412\u041e\u0417\u041c\u0415\u0429\u0415\u041d\u0418\u0418 \u0423\u0429\u0415\u0420\u0411\u0410, \u0423\u0411\u042b\u0422\u041a\u041e\u0412 \u0418\u041b\u0418 \u0414\u0420\u0423\u0413\u0418\u0425 \u0422\u0420\u0415\u0411\u041e\u0412\u0410\u041d\u0418\u0419 \u041f\u041e \u0414\u0415\u0419\u0421\u0422\u0412\u0423\u042e\u0429\u0418\u041c \u041a\u041e\u041d\u0422\u0420\u0410\u041a\u0422\u0410\u041c, \u0414\u0415\u041b\u0418\u041a\u0422\u0410\u041c \u0418\u041b\u0418 \u0418\u041d\u041e\u041c\u0423, \u0412\u041e\u0417\u041d\u0418\u041a\u0428\u0418\u041c \u0418\u0417, \u0418\u041c\u0415\u042e\u0429\u0418\u041c \u041f\u0420\u0418\u0427\u0418\u041d\u041e\u0419 \u0418\u041b\u0418 \u0421\u0412\u042f\u0417\u0410\u041d\u041d\u042b\u041c \u0421 \u041f\u0420\u041e\u0413\u0420\u0410\u041c\u041c\u041d\u042b\u041c \u041e\u0411\u0415\u0421\u041f\u0415\u0427\u0415\u041d\u0418\u0415\u041c \u0418\u041b\u0418 \u0418\u0421\u041f\u041e\u041b\u042c\u0417\u041e\u0412\u0410\u041d\u0418\u0415\u041c \u041f\u0420\u041e\u0413\u0420\u0410\u041c\u041c\u041d\u041e\u0413\u041e \u041e\u0411\u0415\u0421\u041f\u0415\u0427\u0415\u041d\u0418\u042f \u0418\u041b\u0418 \u0418\u041d\u042b\u041c\u0418 \u0414\u0415\u0419\u0421\u0422\u0412\u0418\u042f\u041c\u0418 \u0421 \u041f\u0420\u041e\u0413\u0420\u0410\u041c\u041c\u041d\u042b\u041c \u041e\u0411\u0415\u0421\u041f\u0415\u0427\u0415\u041d\u0418\u0415\u041c.</p>"},{"location":"blog/2025-01-21-nanopublications/slides/shower/themes/ribbon/LICENSE/","title":"The MIT License","text":"<p>Copyright \u00a9 2010\u20132019 Vadim Makeev, https://pepelsbey.dev/</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"blog/2025-01-21-nanopublications/slides/shower/themes/ribbon/LICENSE/#mit","title":"\u041b\u0438\u0446\u0435\u043d\u0437\u0438\u044f MIT","text":"<p>Copyright \u00a9 2010\u20132019 \u0412\u0430\u0434\u0438\u043c \u041c\u0430\u043a\u0435\u0435\u0432, https://pepelsbey.dev/</p> <p>\u0414\u0430\u043d\u043d\u0430\u044f \u043b\u0438\u0446\u0435\u043d\u0437\u0438\u044f \u0440\u0430\u0437\u0440\u0435\u0448\u0430\u0435\u0442 \u043b\u0438\u0446\u0430\u043c, \u043f\u043e\u043b\u0443\u0447\u0438\u0432\u0448\u0438\u043c \u043a\u043e\u043f\u0438\u044e \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u043e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f \u0438 \u0441\u043e\u043f\u0443\u0442\u0441\u0442\u0432\u0443\u044e\u0449\u0435\u0439 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u0438 (\u0432 \u0434\u0430\u043b\u044c\u043d\u0435\u0439\u0448\u0435\u043c \u0438\u043c\u0435\u043d\u0443\u0435\u043c\u044b\u043c\u0438 \u00ab\u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435\u00bb), \u0431\u0435\u0437\u0432\u043e\u0437\u043c\u0435\u0437\u0434\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435 \u0431\u0435\u0437 \u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u0438\u0439, \u0432\u043a\u043b\u044e\u0447\u0430\u044f \u043d\u0435\u043e\u0433\u0440\u0430\u043d\u0438\u0447\u0435\u043d\u043d\u043e\u0435 \u043f\u0440\u0430\u0432\u043e \u043d\u0430 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435, \u043a\u043e\u043f\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435, \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u0435, \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435, \u043f\u0443\u0431\u043b\u0438\u043a\u0430\u0446\u0438\u044e, \u0440\u0430\u0441\u043f\u0440\u043e\u0441\u0442\u0440\u0430\u043d\u0435\u043d\u0438\u0435, \u0441\u0443\u0431\u043b\u0438\u0446\u0435\u043d\u0437\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0438/\u0438\u043b\u0438 \u043f\u0440\u043e\u0434\u0430\u0436\u0443 \u043a\u043e\u043f\u0438\u0439 \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f, \u0442\u0430\u043a\u0436\u0435 \u043a\u0430\u043a \u0438 \u043b\u0438\u0446\u0430\u043c, \u043a\u043e\u0442\u043e\u0440\u044b\u043c \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f \u0434\u0430\u043d\u043d\u043e\u0435 \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0435 \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u0435, \u043f\u0440\u0438 \u0441\u043e\u0431\u043b\u044e\u0434\u0435\u043d\u0438\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0445 \u0443\u0441\u043b\u043e\u0432\u0438\u0439:</p> <p>\u0423\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0435 \u0432\u044b\u0448\u0435 \u0443\u0432\u0435\u0434\u043e\u043c\u043b\u0435\u043d\u0438\u0435 \u043e\u0431 \u0430\u0432\u0442\u043e\u0440\u0441\u043a\u043e\u043c \u043f\u0440\u0430\u0432\u0435 \u0438 \u0434\u0430\u043d\u043d\u044b\u0435 \u0443\u0441\u043b\u043e\u0432\u0438\u044f \u0434\u043e\u043b\u0436\u043d\u044b \u0431\u044b\u0442\u044c \u0432\u043a\u043b\u044e\u0447\u0435\u043d\u044b \u0432\u043e \u0432\u0441\u0435 \u043a\u043e\u043f\u0438\u0438 \u0438\u043b\u0438 \u0437\u043d\u0430\u0447\u0438\u043c\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u0430\u043d\u043d\u043e\u0433\u043e \u041f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u043e\u0433\u043e \u041e\u0431\u0435\u0441\u043f\u0435\u0447\u0435\u043d\u0438\u044f.</p> <p>\u0414\u0410\u041d\u041d\u041e\u0415 \u041f\u0420\u041e\u0413\u0420\u0410\u041c\u041c\u041d\u041e\u0415 \u041e\u0411\u0415\u0421\u041f\u0415\u0427\u0415\u041d\u0418\u0415 \u041f\u0420\u0415\u0414\u041e\u0421\u0422\u0410\u0412\u041b\u042f\u0415\u0422\u0421\u042f \u00ab\u041a\u0410\u041a \u0415\u0421\u0422\u042c\u00bb, \u0411\u0415\u0417 \u041a\u0410\u041a\u0418\u0425-\u041b\u0418\u0411\u041e \u0413\u0410\u0420\u0410\u041d\u0422\u0418\u0419, \u042f\u0412\u041d\u041e \u0412\u042b\u0420\u0410\u0416\u0415\u041d\u041d\u042b\u0425 \u0418\u041b\u0418 \u041f\u041e\u0414\u0420\u0410\u0417\u0423\u041c\u0415\u0412\u0410\u0415\u041c\u042b\u0425, \u0412\u041a\u041b\u042e\u0427\u0410\u042f, \u041d\u041e \u041d\u0415 \u041e\u0413\u0420\u0410\u041d\u0418\u0427\u0418\u0412\u0410\u042f\u0421\u042c \u0413\u0410\u0420\u0410\u041d\u0422\u0418\u042f\u041c\u0418 \u0422\u041e\u0412\u0410\u0420\u041d\u041e\u0419 \u041f\u0420\u0418\u0413\u041e\u0414\u041d\u041e\u0421\u0422\u0418, \u0421\u041e\u041e\u0422\u0412\u0415\u0422\u0421\u0422\u0412\u0418\u042f \u041f\u041e \u0415\u0413\u041e \u041a\u041e\u041d\u041a\u0420\u0415\u0422\u041d\u041e\u041c\u0423 \u041d\u0410\u0417\u041d\u0410\u0427\u0415\u041d\u0418\u042e \u0418 \u041e\u0422\u0421\u0423\u0422\u0421\u0422\u0412\u0418\u042f \u041d\u0410\u0420\u0423\u0428\u0415\u041d\u0418\u0419 \u041f\u0420\u0410\u0412. \u041d\u0418 \u0412 \u041a\u0410\u041a\u041e\u041c \u0421\u041b\u0423\u0427\u0410\u0415 \u0410\u0412\u0422\u041e\u0420\u042b \u0418\u041b\u0418 \u041f\u0420\u0410\u0412\u041e\u041e\u0411\u041b\u0410\u0414\u0410\u0422\u0415\u041b\u0418 \u041d\u0415 \u041d\u0415\u0421\u0423\u0422 \u041e\u0422\u0412\u0415\u0422\u0421\u0422\u0412\u0415\u041d\u041d\u041e\u0421\u0422\u0418 \u041f\u041e \u0418\u0421\u041a\u0410\u041c \u041e \u0412\u041e\u0417\u041c\u0415\u0429\u0415\u041d\u0418\u0418 \u0423\u0429\u0415\u0420\u0411\u0410, \u0423\u0411\u042b\u0422\u041a\u041e\u0412 \u0418\u041b\u0418 \u0414\u0420\u0423\u0413\u0418\u0425 \u0422\u0420\u0415\u0411\u041e\u0412\u0410\u041d\u0418\u0419 \u041f\u041e \u0414\u0415\u0419\u0421\u0422\u0412\u0423\u042e\u0429\u0418\u041c \u041a\u041e\u041d\u0422\u0420\u0410\u041a\u0422\u0410\u041c, \u0414\u0415\u041b\u0418\u041a\u0422\u0410\u041c \u0418\u041b\u0418 \u0418\u041d\u041e\u041c\u0423, \u0412\u041e\u0417\u041d\u0418\u041a\u0428\u0418\u041c \u0418\u0417, \u0418\u041c\u0415\u042e\u0429\u0418\u041c \u041f\u0420\u0418\u0427\u0418\u041d\u041e\u0419 \u0418\u041b\u0418 \u0421\u0412\u042f\u0417\u0410\u041d\u041d\u042b\u041c \u0421 \u041f\u0420\u041e\u0413\u0420\u0410\u041c\u041c\u041d\u042b\u041c \u041e\u0411\u0415\u0421\u041f\u0415\u0427\u0415\u041d\u0418\u0415\u041c \u0418\u041b\u0418 \u0418\u0421\u041f\u041e\u041b\u042c\u0417\u041e\u0412\u0410\u041d\u0418\u0415\u041c \u041f\u0420\u041e\u0413\u0420\u0410\u041c\u041c\u041d\u041e\u0413\u041e \u041e\u0411\u0415\u0421\u041f\u0415\u0427\u0415\u041d\u0418\u042f \u0418\u041b\u0418 \u0418\u041d\u042b\u041c\u0418 \u0414\u0415\u0419\u0421\u0422\u0412\u0418\u042f\u041c\u0418 \u0421 \u041f\u0420\u041e\u0413\u0420\u0410\u041c\u041c\u041d\u042b\u041c \u041e\u0411\u0415\u0421\u041f\u0415\u0427\u0415\u041d\u0418\u0415\u041c.</p>"},{"location":"blog/2025-03-15.writing-a-nanopublication/","title":"Writing a Nanopublication","text":"<pre><code>ssh-keygen -t rsa -b 4096 -f ~/.nanopub/id_rsa -C \"anatoly@iolanta.tech\"\npyld get yaml-ld.yamlld | rdfpipe -i json-ld -o trig - &gt; yaml-ld.trig\nnanopub sign yaml-ld.trig\n</code></pre>"},{"location":"blog/knowledge-graph-assignment/","title":"Introducing Iolanta ontologyAssignment for MC-1 Fall 2025 \u00a9 Anatoly Scherbakov","text":""},{"location":"blog/knowledge-graph-assignment/#problem-use-cases","title":"Problem &amp; Use Cases","text":"<p>The semantic web contains vast amounts of machine-readable RDF data, but this data is often difficult for humans to understand and navigate.</p> <ul> <li>Iolanta is a tool that aims to provide a uniform way to make Linked Data human friendly,</li> <li>which capability is underpinned by the Iolanta ontology described in this document.</li> </ul> <p>Use cases we're going to focus on are as follows:</p> <ul> <li> <p> Visualize Linked Data</p> <p>Different output formats require different visualization approaches. Iolanta's facet system adapts rendering based on output datatype, allowing the same data to be rendered as text, HTML, diagrams, or other formats.</p> </li> <li> <p> Browse &amp; Discover Linked Data</p> <p>Iolanta implements text-based terminal interface to browse Linked Data on the Web.</p> </li> </ul>"},{"location":"blog/knowledge-graph-assignment/#serialization-yaml-ld","title":"Serialization: YAML-LD","text":"<p>The Iolanta ontology is implemented using YAML-LD, a human-friendly serialization format for JSON-LD that makes RDF data more readable and maintainable. Each class and property is defined in separate <code>.yamlld</code> files with a shared context, which is provided below.</p> context.yamlld<pre><code>\"@context\":\n  # Use $keywords instead of @keywords in the ontology &amp; data files.\n  # This will allow to avoid extra quotes.\n  \"@import\": https://json-ld.org/contexts/dollar-convenience.jsonld\n\n  # Make well known ontologies usable\n  rdfs: http://www.w3.org/2000/01/rdf-schema#\n  owl: http://www.w3.org/2002/07/owl#\n  foaf: http://xmlns.com/foaf/0.1/\n  schema: https://schema.org/\n  vann: http://purl.org/vocab/vann/\n\n  $: rdfs:label\n\n  # I have a weakness for Unicode symbols and YAML-LD permits me an indulgence \u263a\n  \u2286:\n    \"@type\": \"@id\"\n    \"@id\": rdfs:subClassOf\n\n  domain:\n    \"@id\": rdfs:domain\n    \"@type\": \"@id\"\n\n  range:\n    \"@id\": rdfs:range\n    \"@type\": \"@id\"\n\n  \u2192:\n    \"@id\": iolanta:outputs\n    \"@type\": \"@id\"\n\n  \u21a6:\n    \"@id\": iolanta:matches\n</code></pre>"},{"location":"blog/knowledge-graph-assignment/#facet-class","title":"<code>Facet</code> class","text":"facet.yamlld<pre><code>\"@context\": context.yamlld\n\n$id: iolanta:Facet\n$type: owl:Class\n\n$: Facet\n\nrdfs:comment: |\n  A Facet is a visualization component that transforms RDF nodes into human-readable formats.\n  Facets are the core mechanism by which Iolanta makes Linked Data accessible to users.\n  Each facet is designed to handle specific types of RDF nodes and render them appropriately\n  for different output formats (terminal, web, etc.).\n</code></pre> <pre><code>graph LR\n  iolanta_Facet(\"Facet\")\n  click iolanta_Facet \"iolanta:Facet\"\n  Literal-0161428b81534d179a220f1d9d9df7f3[[\"A Facet is a visualization component that transforms RDF nodes into human-readable formats.\n  Facets are the core mechanism by which Iolanta makes Linked Data accessible to users.\n  Each facet is designed to handle specific types of RDF nodes and render them appropriately\n  for different output formats (terminal, web, etc.).\n  \"]]\n  iolanta_Facet(\"Facet\")\n  click iolanta_Facet \"iolanta:Facet\"\n  https___www_w3_org_2002_07_owl_Class(\"Class\")\n  click https___www_w3_org_2002_07_owl_Class \"https://www.w3.org/2002/07/owl#Class\"\n  iolanta_Facet --- 3b65e48580046f8ff11bee531647051f([\"comment\"])--&gt; Literal-0161428b81534d179a220f1d9d9df7f3\n  click 3b65e48580046f8ff11bee531647051f \"https://www.w3.org/2000/01/rdf-schema#comment\"\n  class 3b65e48580046f8ff11bee531647051f predicate\n  iolanta_Facet --- 543de4ba759d94b64175538bb890fc5b([\"type\"])--&gt; https___www_w3_org_2002_07_owl_Class\n  click 543de4ba759d94b64175538bb890fc5b \"https://www.w3.org/1999/02/22-rdf-syntax-ns#type\"\n  class 543de4ba759d94b64175538bb890fc5b predicate\n  classDef predicate fill:transparent,stroke:transparent,stroke-width:0px;</code></pre> <p>Graph rendering</p> <p>One of the Facets that Iolanta implements is a Mermaid renderer, which was responsible for generation of the graph above. Below, we will look a bit deeper into how that works.</p>"},{"location":"blog/knowledge-graph-assignment/#outputdatatype-class","title":"<code>OutputDatatype</code> class","text":"output-datatype.yamlld<pre><code>\"@context\": context.yamlld\n\n$id: iolanta:OutputDatatype\n$type: owl:Class\n\n$: Output Datatype\n\n\u2286: rdfs:Datatype\n\nrdfs:comment: |\n  Output format where visualization applications render their results.\n  Examples: terminal text, HTML, Mermaid diagrams.\n</code></pre> <pre><code>graph LR\n  iolanta_OutputDatatype(\"Output Datatype\")\n  click iolanta_OutputDatatype \"iolanta:OutputDatatype\"\n  https___www_w3_org_2002_07_owl_Class(\"Class\")\n  click https___www_w3_org_2002_07_owl_Class \"https://www.w3.org/2002/07/owl#Class\"\n  iolanta_OutputDatatype(\"Output Datatype\")\n  click iolanta_OutputDatatype \"iolanta:OutputDatatype\"\n  https___www_w3_org_2000_01_rdf-schema_Datatype(\"Datatype\")\n  click https___www_w3_org_2000_01_rdf-schema_Datatype \"https://www.w3.org/2000/01/rdf-schema#Datatype\"\n  iolanta_OutputDatatype(\"Output Datatype\")\n  click iolanta_OutputDatatype \"iolanta:OutputDatatype\"\n  Literal-53d3f4c1edd701295ec517eb3054c54c[[\"Output format where visualization applications render their results.\n  Examples: terminal text, HTML, Mermaid diagrams.\n  \"]]\n  iolanta_OutputDatatype --- 74ad375101eb65b8b3b87e0e510d44ba([\"type\"])--&gt; https___www_w3_org_2002_07_owl_Class\n  click 74ad375101eb65b8b3b87e0e510d44ba \"https://www.w3.org/1999/02/22-rdf-syntax-ns#type\"\n  class 74ad375101eb65b8b3b87e0e510d44ba predicate\n  iolanta_OutputDatatype --- 3b6db002a49bf77d94bf270cc33fa073([\"subClassOf\"])--&gt; https___www_w3_org_2000_01_rdf-schema_Datatype\n  click 3b6db002a49bf77d94bf270cc33fa073 \"https://www.w3.org/2000/01/rdf-schema#subClassOf\"\n  class 3b6db002a49bf77d94bf270cc33fa073 predicate\n  iolanta_OutputDatatype --- cf0c3a53b5dd2adfd49666cee75cb247([\"comment\"])--&gt; Literal-53d3f4c1edd701295ec517eb3054c54c\n  click cf0c3a53b5dd2adfd49666cee75cb247 \"https://www.w3.org/2000/01/rdf-schema#comment\"\n  class cf0c3a53b5dd2adfd49666cee75cb247 predicate\n  classDef predicate fill:transparent,stroke:transparent,stroke-width:0px;</code></pre>"},{"location":"blog/knowledge-graph-assignment/#sparqltext-class","title":"<code>SPARQLText</code> class","text":"sparql-text.yamlld<pre><code>\"@context\": context.yamlld\n\n$id: iolanta:SPARQLText\n$type: owl:Class\n\n$: SPARQL Text\n\n\u2286: rdfs:Datatype\n\ncomment: |\n  Datatype for SPARQL query text.\n  Must be valid SPARQL syntax.\n</code></pre> <pre><code>graph LR\n  iolanta_SPARQLText(\"SPARQL Text\")\n  click iolanta_SPARQLText \"iolanta:SPARQLText\"\n  https___www_w3_org_2002_07_owl_Class(\"Class\")\n  click https___www_w3_org_2002_07_owl_Class \"https://www.w3.org/2002/07/owl#Class\"\n  iolanta_SPARQLText(\"SPARQL Text\")\n  click iolanta_SPARQLText \"iolanta:SPARQLText\"\n  https___www_w3_org_2000_01_rdf-schema_Datatype(\"Datatype\")\n  click https___www_w3_org_2000_01_rdf-schema_Datatype \"https://www.w3.org/2000/01/rdf-schema#Datatype\"\n  iolanta_SPARQLText --- 828f9dff3289b49b4b70ecd2910a2643([\"type\"])--&gt; https___www_w3_org_2002_07_owl_Class\n  click 828f9dff3289b49b4b70ecd2910a2643 \"https://www.w3.org/1999/02/22-rdf-syntax-ns#type\"\n  class 828f9dff3289b49b4b70ecd2910a2643 predicate\n  iolanta_SPARQLText --- 409da697231cc1d8080c546b7b2f86e0([\"subClassOf\"])--&gt; https___www_w3_org_2000_01_rdf-schema_Datatype\n  click 409da697231cc1d8080c546b7b2f86e0 \"https://www.w3.org/2000/01/rdf-schema#subClassOf\"\n  class 409da697231cc1d8080c546b7b2f86e0 predicate\n  classDef predicate fill:transparent,stroke:transparent,stroke-width:0px;</code></pre>"},{"location":"blog/knowledge-graph-assignment/#matches-datatype-property","title":"<code>matches</code> datatype property","text":"matches.yamlld<pre><code>\"@context\": context.yamlld\n\n$id: iolanta:matches\n$type: owl:DatatypeProperty\n\n$: matches\ndomain: iolanta:Facet\nrange: iolanta:SPARQLText\n\ncomment: |\n  Maps a Facet instance to a SPARQL &lt;code&gt;ASK&lt;/code&gt;\n  query pattern that can use &lt;code&gt;$this&lt;/code&gt;\n  bound variable. If the query returns True,\n  this Facet can visualize the node denoted as\n  &lt;code&gt;$this&lt;/code&gt; in the query.\n</code></pre> <pre><code>graph LR\n  iolanta_matches(\"matches\")\n  click iolanta_matches \"iolanta:matches\"\n  https___www_w3_org_2002_07_owl_DatatypeProperty(\"DatatypeProperty\")\n  click https___www_w3_org_2002_07_owl_DatatypeProperty \"https://www.w3.org/2002/07/owl#DatatypeProperty\"\n  iolanta_matches(\"matches\")\n  click iolanta_matches \"iolanta:matches\"\n  iolanta_SPARQLText(\"SPARQL Text\")\n  click iolanta_SPARQLText \"iolanta:SPARQLText\"\n  iolanta_matches(\"matches\")\n  click iolanta_matches \"iolanta:matches\"\n  iolanta_Facet(\"Facet\")\n  click iolanta_Facet \"iolanta:Facet\"\n  iolanta_matches --- 86d845ea00b6e7659a0a563678756632([\"type\"])--&gt; https___www_w3_org_2002_07_owl_DatatypeProperty\n  click 86d845ea00b6e7659a0a563678756632 \"https://www.w3.org/1999/02/22-rdf-syntax-ns#type\"\n  class 86d845ea00b6e7659a0a563678756632 predicate\n  iolanta_matches --- 6d046e33d11cd66cf81f013b6a984992([\"range\"])--&gt; iolanta_SPARQLText\n  click 6d046e33d11cd66cf81f013b6a984992 \"https://www.w3.org/2000/01/rdf-schema#range\"\n  class 6d046e33d11cd66cf81f013b6a984992 predicate\n  iolanta_matches --- 4875563fce7b9d3042b31b4dc391530a([\"domain\"])--&gt; iolanta_Facet\n  click 4875563fce7b9d3042b31b4dc391530a \"https://www.w3.org/2000/01/rdf-schema#domain\"\n  class 4875563fce7b9d3042b31b4dc391530a predicate\n  classDef predicate fill:transparent,stroke:transparent,stroke-width:0px;</code></pre>"},{"location":"blog/knowledge-graph-assignment/#outputs-object-property","title":"<code>outputs</code> object property","text":"outputs.yamlld<pre><code>\"@context\": context.yamlld\n\n$id: iolanta:outputs\n$type: owl:ObjectProperty\n\n$: outputs\n\ndomain: iolanta:Facet\nrange: iolanta:OutputDatatype\n\ncomment: |\n  Links a facet to its supported output formats.\n  Examples: terminal, HTML, Mermaid.\n</code></pre> <pre><code>graph LR\n  iolanta_outputs(\"outputs\")\n  click iolanta_outputs \"iolanta:outputs\"\n  https___www_w3_org_2002_07_owl_ObjectProperty(\"ObjectProperty\")\n  click https___www_w3_org_2002_07_owl_ObjectProperty \"https://www.w3.org/2002/07/owl#ObjectProperty\"\n  iolanta_outputs(\"outputs\")\n  click iolanta_outputs \"iolanta:outputs\"\n  iolanta_OutputDatatype(\"Output Datatype\")\n  click iolanta_OutputDatatype \"iolanta:OutputDatatype\"\n  iolanta_outputs(\"outputs\")\n  click iolanta_outputs \"iolanta:outputs\"\n  iolanta_Facet(\"Facet\")\n  click iolanta_Facet \"iolanta:Facet\"\n  iolanta_outputs --- a6d3f9bd930be82d702d9e8c02525b23([\"type\"])--&gt; https___www_w3_org_2002_07_owl_ObjectProperty\n  click a6d3f9bd930be82d702d9e8c02525b23 \"https://www.w3.org/1999/02/22-rdf-syntax-ns#type\"\n  class a6d3f9bd930be82d702d9e8c02525b23 predicate\n  iolanta_outputs --- 1dae8052b53e5035b5c1919b4e6e0793([\"range\"])--&gt; iolanta_OutputDatatype\n  click 1dae8052b53e5035b5c1919b4e6e0793 \"https://www.w3.org/2000/01/rdf-schema#range\"\n  class 1dae8052b53e5035b5c1919b4e6e0793 predicate\n  iolanta_outputs --- 428570c6d0439a1b88b8b50c33c1be47([\"domain\"])--&gt; iolanta_Facet\n  click 428570c6d0439a1b88b8b50c33c1be47 \"https://www.w3.org/2000/01/rdf-schema#domain\"\n  class 428570c6d0439a1b88b8b50c33c1be47 predicate\n  classDef predicate fill:transparent,stroke:transparent,stroke-width:0px;</code></pre>"},{"location":"blog/knowledge-graph-assignment/#identifier-strategy","title":"Identifier Strategy","text":"<p>We use slash-terminated URIs under <code>https://iolanta.tech/</code> so every resource is dereferenceable to its own page.</p>"},{"location":"blog/knowledge-graph-assignment/#facet-identifiers-with-package-url-purl","title":"Facet identifiers with Package URL (purl)","text":"<p>Facets use <code>pkg:</code> URIs per the purl spec.</p> <ul> <li>Format: <code>pkg:pypi/&lt;package&gt;#&lt;facet&gt;</code></li> <li>Examples:<ul> <li><code>pkg:pypi/iolanta#mermaid-graph</code> for Mermaid rendering;</li> <li><code>pkg:pypi/iolanta#textual-graph</code> for text user interface graph triple lists;</li> <li><code>pkg:pypi/iolanta#title-foaf-person</code> for the name of a person</li> </ul> </li> <li>Benefits: unique package-scoped IDs; version-agnostic; standards-based</li> </ul>"},{"location":"blog/knowledge-graph-assignment/#graph-representation-choice","title":"Graph Representation Choice","text":"<p>Since the domain is Linked Data visualization, we use RDF with OWL semantics, and SPARQL as the query language.</p> <ul> <li>Native URIs and vocabularies; broad reuse and interoperability.</li> <li>LPG is out of scope for this document.</li> </ul>"},{"location":"blog/knowledge-graph-assignment/#querying-the-knowledge-graph-visualizing-it","title":"Querying the Knowledge Graph &amp; Visualizing it","text":"<p>There are at least two ways to get a Mermaid representation of the Facet class description:</p> Within an MkDocs page, like this documentCLI command <pre><code>{{ (docs / 'blog/knowledge-graph-assignment/facet.yamlld') | as('mermaid') }}\n</code></pre> <pre><code>iolanta docs/blog/knowledge-graph-assignment/facet.yamlld --as mermaid\n</code></pre>"},{"location":"blog/knowledge-graph-assignment/#stage-0-what-is-mermaid-exactly","title":"Stage 0: What is <code>mermaid</code> exactly?","text":"<p>It is a shortened form of https://iolanta.tech/datatypes/mermaid, an instance of <code>OutputDatatype</code> defined as follows:</p> mermaid.yamlld<pre><code>\"@context\":\n  \"@import\": https://json-ld.org/contexts/dollar-convenience.jsonld\n  iolanta: https://iolanta.tech/\n  rdfs: http://www.w3.org/2000/01/rdf-schema#\n\n  $: rdfs:label\n  \u2192:\n    \"@type\": \"@id\"\n    \"@id\": iolanta:outputs\n\n  \u21a6:\n    \"@id\": iolanta:matches\n    \"@type\": iolanta:SPARQLText\n\n$id: pkg:pypi/iolanta#mermaid-graph\n$: Mermaid Graph\n\n\u2192:\n  $id: https://iolanta.tech/datatypes/mermaid\n  $: Mermaid\n  $type: iolanta:OutputDatatype\n\n\u21a6:\n  - ASK WHERE { GRAPH $this { ?s ?p ?o } }\n  - ASK WHERE { $this iolanta:has-sub-graph ?subgraph }\n</code></pre> <pre><code>graph LR\n  pkg_pypi_iolanta_mermaid-graph(\"Mermaid Graph\")\n  click pkg_pypi_iolanta_mermaid-graph \"pkg:pypi/iolanta#mermaid-graph\"\n  Literal-e6835a48474d4a4a89205cd8b404de41[[\"ASK WHERE { $this iolanta:has-sub-graph ?subgraph }\"]]\n  https___iolanta_tech_datatypes_mermaid(\"Mermaid\")\n  click https___iolanta_tech_datatypes_mermaid \"https://iolanta.tech/datatypes/mermaid\"\n  https___iolanta_tech_OutputDatatype(\"iolanta.tech/OutputDatatype\")\n  click https___iolanta_tech_OutputDatatype \"https://iolanta.tech/OutputDatatype\"\n  pkg_pypi_iolanta_mermaid-graph(\"Mermaid Graph\")\n  click pkg_pypi_iolanta_mermaid-graph \"pkg:pypi/iolanta#mermaid-graph\"\n  Literal-c68220abab4f6bdf9e5acec73f922900[[\"ASK WHERE { GRAPH $this { ?s ?p ?o } }\"]]\n  pkg_pypi_iolanta_mermaid-graph(\"Mermaid Graph\")\n  click pkg_pypi_iolanta_mermaid-graph \"pkg:pypi/iolanta#mermaid-graph\"\n  https___iolanta_tech_datatypes_mermaid(\"Mermaid\")\n  click https___iolanta_tech_datatypes_mermaid \"https://iolanta.tech/datatypes/mermaid\"\n  pkg_pypi_iolanta_mermaid-graph --- 3238bde1af35c3f73d34849ad4437033([\"iolanta.tech/matches\"])--&gt; Literal-e6835a48474d4a4a89205cd8b404de41\n  click 3238bde1af35c3f73d34849ad4437033 \"https://iolanta.tech/matches\"\n  class 3238bde1af35c3f73d34849ad4437033 predicate\n  https___iolanta_tech_datatypes_mermaid --- d5dda2fbe740218669a6a2df92d43b14([\"type\"])--&gt; https___iolanta_tech_OutputDatatype\n  click d5dda2fbe740218669a6a2df92d43b14 \"https://www.w3.org/1999/02/22-rdf-syntax-ns#type\"\n  class d5dda2fbe740218669a6a2df92d43b14 predicate\n  pkg_pypi_iolanta_mermaid-graph --- 8db2148e4e56918908ee4f077007d419([\"iolanta.tech/matches\"])--&gt; Literal-c68220abab4f6bdf9e5acec73f922900\n  click 8db2148e4e56918908ee4f077007d419 \"https://iolanta.tech/matches\"\n  class 8db2148e4e56918908ee4f077007d419 predicate\n  pkg_pypi_iolanta_mermaid-graph --- 44fc138a211015cfd7132826e6552473([\"iolanta.tech/outputs\"])--&gt; https___iolanta_tech_datatypes_mermaid\n  click 44fc138a211015cfd7132826e6552473 \"https://iolanta.tech/outputs\"\n  class 44fc138a211015cfd7132826e6552473 predicate\n  classDef predicate fill:transparent,stroke:transparent,stroke-width:0px;</code></pre>"},{"location":"blog/knowledge-graph-assignment/#stage-1-which-facets-can-output-a-visualization-of-this-iolantaoutputdatatype","title":"Stage 1: Which facets can output a visualization of this <code>iolanta:OutputDatatype</code>?","text":"<p>To ascertain that, Iolanta will execute get-query-to-facet.sparql binding <code>$as_datatype</code> to <code>iolanta:mermaid</code>.</p> <pre><code>SELECT ?facet ?match WHERE {\n    ?facet\n        iolanta:matches ?match ;\n        iolanta:outputs $as_datatype .\n}\n</code></pre> facet match <code>pkg:pypi/iolanta#mermaid-graph</code> <code>ASK WHERE { GRAPH $this { ?s ?p ?o } }</code> <code>pkg:pypi/iolanta#mermaid-graph</code> <code>ASK WHERE { $this iolanta:has-sub-graph ?subgraph }</code> <p>For each facet returned, Iolanta evaluates its ASK pattern binding <code>$this</code> to the target node. The mermaid facet matches with:</p> <pre><code>ASK WHERE {\n  GRAPH $this { ?s ?p ?o }\n}\n</code></pre> <p>\u21d2 which evaluates to: \u2705 <code>True</code></p> <ul> <li>This matches because <code>facet.yamlld</code> is interpreted by Iolanta as an RDF named graph when loading this file;</li> <li>We won't delve into <code>iolanta:has-sub-graph</code>, that's rather sketchy right now.</li> </ul>"},{"location":"blog/knowledge-graph-assignment/#stage-2-resolve-facet","title":"Stage 2: Resolve Facet","text":"<p>We'll not delve into this here, but just to mention:</p> <ul> <li>The <code>pkg:</code> URI has a straightforward mapping to a Python object,</li> <li>which is a Python class addressable as <code>iolanta.mermaid.facet:Mermaid</code>.</li> </ul> <p>Where from is this class?</p> <p>This particular class is bundled with Iolanta, but facet classes can also come with other Python packages \u2014 Iolanta plugins.</p> <p>Here's an abridged version of the class:</p> <pre><code>class Mermaid(Facet[str]):\n    \"\"\"Mermaid diagram.\"\"\"\n\n    # \u2026\n\n    def construct_mermaid_for_graph(self, graph: URIRef) -&gt; Iterable[MermaidScalar]:\n        \"\"\"Render graph as mermaid.\"\"\"\n        rows = self.stored_query('graph.sparql', this=graph)\n        # \u2026\n\n    def show(self) -&gt; str:\n        \"\"\"Render mermaid diagram.\"\"\"\n        # \u2026\n        return str(Diagram(children=[*direct_children, *subgraphs]))\n</code></pre> <p>Full version: see the Mermaid facet.</p> <p>Now, facet class is able to run arbitrary SPARQL queries against the graph, retrieving the information necessary for the visualization.</p>"},{"location":"blog/knowledge-graph-assignment/#stage-3-retrieving-graph-data","title":"Stage 3: Retrieving Graph Data","text":"<p>In particular, the Mermaid facet executes graph.sparql to fetch all triples in the named graph, substituting <code>$this</code> to the URI of <code>facet.yamlld</code>:</p> graph.sparql<pre><code>SELECT * WHERE {\n    GRAPH $this {\n        ?s ?p ?o .\n    }\n}\n</code></pre> Triples for <code>facet.yamlld</code> (too many of them) this s p o <code>file:///home/runner/work/iolanta/iolanta/docs/blog/knowledge-graph-assignment/facet.yamlld</code> <code>iolanta:Facet</code> <code>https://www.w3.org/2000/01/rdf-schema#comment</code> `A Facet is a visualization component that transforms RDF nodes into human-readable formats. Facets are the core mechanism by which Iolanta makes Linked Data accessible to users. Each facet is designed to handle specific types of RDF nodes and render them appropriately for different output formats (terminal, web, etc.). ` <code>file:///home/runner/work/iolanta/iolanta/docs/blog/knowledge-graph-assignment/facet.yamlld</code> <code>iolanta:Facet</code> <code>https://www.w3.org/1999/02/22-rdf-syntax-ns#type</code> <code>https://www.w3.org/2002/07/owl#Class</code> <code>file:///home/runner/work/iolanta/iolanta/docs/blog/knowledge-graph-assignment/facet.yamlld</code> <code>iolanta:Facet</code> <code>https://www.w3.org/2000/01/rdf-schema#label</code> <code>Facet</code> <p>These triples are formatted as Mermaid nodes and edges by the facet, producing the diagram, which:</p> <ul> <li>Either gets printed in the console, and you can save it to a file or copy it,</li> <li>Or embedded into software which Iolanta is working with.</li> </ul>"},{"location":"blog/knowledge-graph-assignment/#other-examples","title":"Other examples","text":"<p>While rendering Linked Data, Iolanta will try to fetch references from the Web to other pieces of Linked Data. Thus, we are trying to get the most complete visualization.</p>"},{"location":"blog/knowledge-graph-assignment/#an-orcid-profile","title":"An ORCID profile","text":"<pre><code>iolanta https://orcid.org/0000-0002-1825-0097\n</code></pre>"},{"location":"blog/knowledge-graph-assignment/#rdfs-label","title":"RDFS label","text":"<pre><code>iolanta https://www.w3.org/2000/01/rdf-schema#label\n</code></pre>"},{"location":"blog/knowledge-graph-assignment/#owl-vocabulary-terms","title":"OWL vocabulary terms","text":"<pre><code>iolanta https://www.w3.org/2002/07/owl#\n</code></pre>"},{"location":"blog/knowledge-graph-assignment/#conclusion","title":"Conclusion","text":"<p>The Iolanta ontology provides a framework for Linked Data visualization and browsing with:</p> <ul> <li>Clear domain focus on semantic web usability</li> <li>Well-structured RDF/OWL implementation  </li> <li>Professional URI strategy following Linked Data best practices</li> <li>Full SPARQL support with real-world applications</li> <li>Integration with existing semantic web resources</li> </ul>"},{"location":"datatypes/fallback-title/","title":"Title (fallback)","text":"<p>A short string naming something. Used in links, lists, page titles, property tables, and many other cases.</p> <p>This is a fallback datatype</p> <p>Should be used as fallback in case more fine-tuned implementations using Title do not work for this IRI.</p> Property Value \u2208 Instance Of <code>rdfs:Datatype</code> \u228a Subclass Of <code>xsd:string</code> Has default facet <code>iolanta.facets.title.TitleFacet</code>"},{"location":"datatypes/title/","title":"Title","text":"<p>A short string naming something. Used in links, lists, page titles, property tables, and many other cases.</p> Property Value \u2208 Instance Of <code>rdfs:Datatype</code> \u228a Subclass Of <code>xsd:string</code> Has default facet <code>iolanta.facets.title.TitleFacet</code>"},{"location":"datatypes/title/#specialized-facets","title":"Specialized Facets","text":"Class Facet Description <code>foaf:Person</code> <code>pkg:pypi/iolanta#title-foaf-person</code> Render name of a person from their first and last name"},{"location":"decisions/custom-rdflib-graph/","title":"Use a custom rdflib graph class","text":""},{"location":"decisions/custom-rdflib-graph/#context","title":"Context","text":"<p>RDFLib implements multiple graph classes (such as <code>Graph</code>, <code>Dataset</code> and others), and also supports multiple storage engines. Where to inject our custom download code?</p>"},{"location":"decisions/custom-rdflib-graph/#decision","title":"Decision","text":"<p>Use a custom graph class.</p> <p>It would be best to allow using different storage engines (in-memory, BerkeleyDB, Oxigraph, whatever) with our query engine because we basically don't care how the data in local RDF storage is stored, it's enough that we can operate with that data using SPARQL.</p> <p>Best would be to inject something into SPARQL execution layer, if that's possible.</p>"},{"location":"decisions/custom-rdflib-graph/#consequences","title":"Consequences","text":"<ul> <li>We'll be able to use different storage backends</li> <li>Upgrade <code>rdflib</code> at <code>iolanta</code> project to the latest version first</li> </ul>"},{"location":"decisions/default-facet/","title":"Use Record as a default facet","text":""},{"location":"decisions/default-facet/#context","title":"Context","text":"<p>Presently, when I'm trying to render something, <code>Link</code> is the default facet.</p> <pre><code>$ iolanta render rdfs:comment\nhttps://www.w3.org/2000/01/rdf-schema#comment\n</code></pre>"},{"location":"decisions/default-facet/#decision","title":"Decision","text":"<p>Use Record instead.</p>"},{"location":"decisions/default-facet/#consequences","title":"Consequences","text":"<p>This will make the default rendering much more useful for debugging the graph.</p>"},{"location":"decisions/discard-files/","title":"Discard files, just use a cache","text":""},{"location":"decisions/discard-files/#context","title":"Context","text":"<p>When loading data from the Web dynamically we can use plain <code>graph.parse()</code> method. Downloading files onto disk explicitly is not strictly necessary for the <code>iolanta</code> browser experience. We'll get back to that when we start editing Linked Data.</p>"},{"location":"decisions/discard-files/#decision","title":"Decision","text":"<p><code>shelve</code> the graph, load data into it. This is enough for an MVP.</p>"},{"location":"decisions/discard-files/#consequences","title":"Consequences","text":"<p>Get into reproducibility and file-based LD repos later.</p>"},{"location":"decisions/find-data-source-by-triple-template/","title":"Find data source by a triple template","text":""},{"location":"decisions/find-data-source-by-triple-template/#context","title":"Context","text":"<ul> <li>We are trying to render <code>rdf:type</code>, and we cannot see its <code>rdfs:label</code>. To solve this, it is enough to download <code>rdf</code> ontology, and the address of that ontology is hidden within the <code>rdf:type</code> URL.</li> <li>We want to render <code>rdf:type</code> with a label in Russian language; if Russian labels for RDF terms are stored in a separate file then we need to know</li> <li>that we need an <code>rdfs:label</code>,</li> <li>and we need to know that language must be <code>@ru</code>.</li> </ul>"},{"location":"decisions/find-data-source-by-triple-template/#decision","title":"Decision","text":"<p>A function that determines the location of new data must know full triple template that we're trying to interpolate against the graph.</p>"},{"location":"decisions/find-data-source-by-triple-template/#consequences","title":"Consequences","text":"<ul> <li>Analyse <code>\u2026</code> package as a possible alternative</li> <li>Implement <code>.find_triple()</code> method for a <code>Facet</code>.</li> </ul>"},{"location":"decisions/rdflib-sparql-loader-architecture/","title":"Architecture for <code>rdflib</code> based Cyberspace SPARQL executor","text":""},{"location":"decisions/rdflib-sparql-loader-architecture/#context","title":"Context","text":"<p>The entry point is at <code>rdflib.graph.Graph.query</code>.</p> <ul> <li>It can accept a parsed/compiled <code>Query</code> object<ul> <li>Seems that it ca be prepared by <code>rdflib.plugins.sparql.processor.prepareQuery</code> </li> </ul> </li> <li>It can delegate execution to the <code>store</code>, as per <code>use_store_provided</code> argument</li> <li>It delegates processing to <code>Processor</code> class</li> </ul>"},{"location":"decisions/rdflib-sparql-loader-architecture/#decision","title":"Decision","text":"<p>Load data directly after parsing the SPARQL query in an <code>rdflib</code> SPARQL processor class.</p>"},{"location":"decisions/transparent-downloads/","title":"Download data transparently","text":""},{"location":"decisions/transparent-downloads/#context","title":"Context","text":"<p>When asking for triples in a graph, an application might encounter no results, which might mean that there is not enough information available in the graph.</p>"},{"location":"decisions/transparent-downloads/#decision","title":"Decision","text":"<p>Transparently try to find the missing triples on the Matrix before returning results of the query. Add triples and rerun the query to see if information had been obtained.</p>"},{"location":"decisions/transparent-downloads/#consequences","title":"Consequences","text":"<p>Plugin or application writers will have full illusion of querying the whole Matrix instead of their local graph, which is exactly what we want to achieve.</p>"},{"location":"decisions/use-rdflib/","title":"Use rdflib for querying the Cyberspace","text":""},{"location":"decisions/use-rdflib/#context","title":"Context","text":"<p>Multiple tools are available to federatively query the Cyberspace: Jena, Virtuoso, ...</p>"},{"location":"decisions/use-rdflib/#decision","title":"Decision","text":"<p>Use <code>rdflib</code> as one</p> <ul> <li>Written in Python</li> <li>Supporting multiple storage engines and graph types</li> <li>Used in <code>iolanta</code></li> <li>Most familiar to me</li> </ul>"},{"location":"decisions/use-rdflib/#consequences","title":"Consequences","text":"<ul> <li>Upgrade <code>rdflib</code> in <code>iolanta</code> project to the latest version first</li> <li>And then see how to inject dynamic data source resolve and download into that</li> </ul>"},{"location":"decisions/download-data-while-executing-sparql/","title":"Index","text":""},{"location":"decisions/download-data-while-executing-sparql/#context","title":"Context","text":"<p>We already know that at least one triple template is needed to choose the source from where we will fetch the triples for this template. However, the interaction between software and the Cyberspace is probably going to be in SPARQL. Should we invent a new triple template based API for this?</p>"},{"location":"decisions/download-data-while-executing-sparql/#alternatives","title":"Alternatives","text":"<ul> <li>Dynamically resolve data sources while executing a SPARQL query,</li> <li>Do so with Triple Fragments,</li> <li>Or do so with a sort of ad hoc RDF API.</li> </ul>"},{"location":"decisions/download-data-while-executing-sparql/#decision","title":"Decision","text":"<p>We shall use SPARQL.</p> <p>The review of literature attached to this ADR (see state-of-the-art.yaml) reveals that certain developments in this area do exist, including:</p> <ul> <li><code>LAV</code> system,</li> <li>Its SPARQL based <code>SemLAV</code> extension,</li> <li>and parallel extensions to <code>SemLAV</code>.</li> </ul>"},{"location":"decisions/download-data-while-executing-sparql/#consequences","title":"Consequences","text":"<ul> <li>Use SPARQL as basic language to query the Cyberspace</li> <li>Resolve parts of SPARQL query against different data sources (or RDF Views if that might be said)</li> <li>Multiple triples might come from one data source and can be joined into one query</li> </ul>"},{"location":"decisions/interactive-mode/","title":"Use ... for interactive mode","text":""},{"location":"decisions/interactive-mode/#context","title":"Context","text":"<p>We have two main modes of operation:</p> <ul> <li>non-interactive, where <code>iolanta</code> command will render what it was asked to and quits,</li> <li>and interactive, where a terminal window allows to navigate among IRIs of the Cyberspace.</li> </ul> <p>There are a lot of parameters common to these modes, for instance:</p> <ul> <li><code>project_directory</code> to read files from,</li> <li><code>cache_directory</code> to write downloaded files to.</li> </ul> <p>{{ render(\"interactive-mode-alternatives\") }}</p>"},{"location":"decisions/interactive-mode/#decision","title":"Decision","text":"<p>Use one command for now.</p>"},{"location":"decisions/interactive-mode/#consequences","title":"Consequences","text":"<p>Invent a special environment for the browser main rendering area.</p>"},{"location":"howto/","title":"How To","text":"<ul> <li> <p> Write and publish a nanopublication</p> <p>Write a nanopublication using Iolanta and publish it to the Web with <code>nanopub-py</code>.</p> </li> </ul>"},{"location":"howto/armenia-pm-election/assertion/","title":"Assertion","text":"<p>On January 25, 2025, Armenia's Parliament Speaker Alen Simonyan announced that the next parliamentary elections would be held on June 7, 2026.</p>"},{"location":"howto/asteroid-mr-spock/statement/","title":"Statement","text":"<p>Asteroid 2309 Mr. Spock was named after Mr. Spock, a character from the Star Trek franchise.</p>"},{"location":"howto/nanopublish/","title":"<code>HOWTO</code>  Write and publish a Nanopublication","text":""},{"location":"howto/nanopublish/#knowledge-graphs","title":"Knowledge Graphs","text":"<p>The W3C\u2026</p> <ul> <li>JSON for Linking Data Community Group</li> <li>and JSON-LD Working Group</li> </ul> <p>\u2026have been working on a set of conventions called YAML-LD. Essentially, it is a way to write JSON-LD documents in YAML. YAML-LD documents describe knowledge graphs \u2014 graphs of notions and relations between them.</p> <p>The following diagram portrays a knowledge graph describing what YAML-LD is:</p> <pre><code>graph LR\n  https___json-ld_github_io_yaml-ld_spec(\"YAML-LD\")\n  click https___json-ld_github_io_yaml-ld_spec \"https://json-ld.github.io/yaml-ld/spec/\"\n  Literal-5cc294277266dd585fb000bcc3b0dc5d[[\"A set of conventions built on top of YAML, which outlines how to serialize\n  Linked Data as YAML based on JSON-LD syntax, semantics, and APIs.\n  \"]]\n  https___json-ld_github_io_yaml-ld_spec(\"YAML-LD\")\n  click https___json-ld_github_io_yaml-ld_spec \"https://json-ld.github.io/yaml-ld/spec/\"\n  https___w3id_org_fair_fip_terms_Knowledge-representation-language(\"Knowledge representation language\")\n  click https___w3id_org_fair_fip_terms_Knowledge-representation-language \"https://w3id.org/fair/fip/terms/Knowledge-representation-language\"\n  https___json-ld_github_io_yaml-ld_spec --- 47c279524a4d90fad264e6da66581a76([\"Description\"])--&gt; Literal-5cc294277266dd585fb000bcc3b0dc5d\n  click 47c279524a4d90fad264e6da66581a76 \"https://purl.org/dc/terms/description\"\n  class 47c279524a4d90fad264e6da66581a76 predicate\n  https___json-ld_github_io_yaml-ld_spec --- ea1b411a1ac6c1ba95fdd6fb0b3a6eba([\"type\"])--&gt; https___w3id_org_fair_fip_terms_Knowledge-representation-language\n  click ea1b411a1ac6c1ba95fdd6fb0b3a6eba \"https://www.w3.org/1999/02/22-rdf-syntax-ns#type\"\n  class ea1b411a1ac6c1ba95fdd6fb0b3a6eba predicate\n  classDef predicate fill:transparent,stroke:transparent,stroke-width:0px;</code></pre> <p>YAML-LD will come handy later in this tutorial, but the point is that it is a topic of knowledge, a notion, which can be described within a knowledge graph. Whatever your area of interest might be, you can use knowledge graphs to describe your domain. Examples of statements in a knowledge graph could be:</p> <ul> <li>Mosquitoes bite humans;</li> <li>TRAPPIST-1 system has 7 planets;</li> <li>Pluto is not a planet;</li> <li>even though John Doe says that every dinosaur is a reptile, that statement is false, because a chicken is a dinosaur and a chicken is a bird, not a reptile.</li> </ul> <p>The merits of expressing knowledge as Knowledge Graphs are numerous, but exploration of those is out of scope for this tutorial. We will proceed assuming that you and I are in agreement about that being worth our while.</p>"},{"location":"howto/nanopublish/#explanation","title":"Explanation","text":"<ul> <li>YAML-LD is a Knowledge representation language (there might be other such languages in existence);</li> <li>YAML-LD is a set of conventions built on top of YAML, which outlines how to serialize Linked Data as YAML based on JSON-LD syntax, semantics, and APIs.</li> </ul>"},{"location":"howto/nanopublish/#what-is-a-nanopublication","title":"What is a Nanopublication?","text":"<p>Nanopublication is a special kind of knowledge graph which contains the following subgraphs:</p> <ul> <li>Assertion, describing a statement (like the one above);</li> <li>Provenance, describing how the statement was derived;</li> <li>Publication Info, describing when and how the nanopublication as a whole was published.</li> </ul> <p>Nanopublications are cryptographically signed and published in the decentralized Nanopublication Registry. Thus, when you or I publish a nanopublication,</p> <ul> <li>It will be irrevocably attributed to the author;</li> <li>It will be protected from tampering;</li> <li>Other authors might reference it in their work by a unique ID;</li> <li>It won't disappear when one single service provider goes out of service;</li> <li>It will be machine readable, making it easy to reuse.</li> </ul> <p>This will be yours, or mine, contribution to human knowledge.</p> <p>Let us begin.</p>"},{"location":"howto/nanopublish/#install-prerequisites","title":"Install Prerequisites","text":"<p>In a Python 3.10+ environment, run:</p> <pre><code>pip install iolanta git+https://github.com/iolanta-tech/nanopub-py.git  # (1)!\n</code></pre> <ol> <li>The installation of <code>nanopub-py</code> from  GitHub is required: at the moment of writing, the <code>np create</code> command, which we are going to use, is not yet available in the latest  PyPI version.</li> </ol>"},{"location":"howto/nanopublish/#start-with-an-empty-file","title":"Start with an empty file","text":"<p>Create a new file, called <code>yaml-ld.yamlld</code>, and run, in a separate terminal:</p> <pre><code>iolanta yaml-ld.yamlld\n</code></pre> yaml-ld.yamlld<pre><code># This file is empty so far \u2205\n</code></pre> <p>As you can see on the right, Iolanta has certain difficulties visualizing this document. Well, that's because there is nothing to visualize. The line starting from <code>#</code> is a comment in YAML, it is only written for a human reader; computer ignores it entirely.</p> <p></p>"},{"location":"howto/nanopublish/#we-are-talking-about-yaml-ld","title":"We are talking about YAML-LD","text":"<p>Knowledge Graphs normally refer to things by their URLs (there are also things called URI and IRI but we will not go into that here). If you have a link which describes the notion you are talking about, you can use that link as the identifier of the notion.</p> <p>If the reader wants to know more, they can always open the link in their browser.</p> <p>For YAML-LD, we can use the address of the current YAML-LD specification draft.</p> yaml-ld.yamlld<pre><code>\"@id\": https://json-ld.github.io/yaml-ld/spec/\n</code></pre> <p>Here, <code>@id</code> is a keyword that <code>id</code>entifies the thing we are going to talk about.</p> <p>Info</p> <p><code>\"@id\"</code> has to be in quotes, this is because <code>@</code> is a reserved character in YAML. More on that later.</p> <p>However... Iolanta still cannot visualize this document, why is this?</p> <p></p> <p>The problem now is that the graph we have described only has one node, but no edges, like this:</p> <pre><code>graph TD\n  yaml_ld[\"json-ld.github.io/yaml-ld/spec/\"]\n  click yaml_ld \"https://json-ld.github.io/yaml-ld/spec/\"</code></pre> <p>This degenerated form of a graph is still a graph, mathematically speaking, but it is not a well formed Knowledge Graph because there is no knowledge to convey about YAML-LD. We need to say something about the thing that we had stated, the graph has to have at least one edge.</p>"},{"location":"howto/nanopublish/#specify-title","title":"Specify title","text":"yaml-ld.yamlld<pre><code>\"@id\": https://json-ld.github.io/yaml-ld/spec/\n\"http://www.w3.org/2000/01/rdf-schema#label\": YAML-LD\n</code></pre> <p>And it works!</p> <p></p> <p>This display shows what is called a triple. Here,</p> <ul> <li>YAML-LD (red) is the subject,</li> <li><code>label</code> is the predicate,</li> <li>and <code>YAML-LD</code> (black) is the object.</li> </ul> <p>Subject and Predicate here are clickable, since they are URLs. Object is a string, or a Literal, and is therefore not clickable.</p> <p></p> <p>YAML-LD subject</p> <p></p> <p>Label predicate</p> <p>As you can see, quite a bit of information is available about each. That's because files accessible via each of those URLs contain information about the concepts the URLs stand for.</p> <p>That's called Linked Data.</p>"},{"location":"howto/nanopublish/#it-is-hard-to-type-the-label-property","title":"It is hard to type the <code>\u2026#label</code> property","text":"<p>You will rightfully exclaim:</p> <p>Exclamation \u00a9 you</p> <p>Are you saying I will have to type <pre><code>http://www.w3.org/2000/01/rdf-schema#label\n</code></pre> each time I want to specify a human readable label of something?</p> <p>No, not really. Let's define a context.</p> yaml-ld.yamlld<pre><code>\"@context\":\n  rdfs: http://www.w3.org/2000/01/rdf-schema#\n\n\"@id\": https://json-ld.github.io/yaml-ld/spec/\nrdfs:label: YAML-LD\n</code></pre> <p>Context is the part of the document where we describe how to interpret this document as a Knowledge Graph. In this example, we introduce a shortcut, <code>rdfs</code>, which stands for RDFS ontology. In the body of the document we can refer to that ontology using that shorthand.</p> Short form (CURIE) Full Form <code>rdfs:label</code> <code>http://www.w3.org/2000/01/rdf-schema#label</code> <code>rdfs:seeAlso</code> <code>http://www.w3.org/2000/01/rdf-schema#seeAlso</code> <code>rdfs:Class</code> <code>http://www.w3.org/2000/01/rdf-schema#Class</code> <p></p>"},{"location":"howto/nanopublish/#reduce-the-number-of-quotes","title":"Reduce the number of quotes","text":"<p>yaml-ld.yamlld<pre><code>\"@context\":\n  \"@import\": https://json-ld.org/contexts/dollar-convenience.jsonld\n  rdfs: http://www.w3.org/2000/01/rdf-schema#\n\n$id: https://json-ld.github.io/yaml-ld/spec/\nrdfs:label: YAML-LD\n</code></pre> Here we import a context which remaps <code>@id</code> to <code>$id</code>, which does not have to be quoted in YAML.</p> <p></p>"},{"location":"howto/nanopublish/#draw-the-owl","title":"Draw the owl!","text":"<p>With the examples we've looked through, you will easily read the following YAML-LD statement.</p> yaml-ld.yamlld<pre><code>\"@context\":\n  \"@import\": https://json-ld.org/contexts/dollar-convenience.jsonld\n  dc: http://purl.org/dc/terms/\n  rdfs: http://www.w3.org/2000/01/rdf-schema#\n  fip: https://w3id.org/fair/fip/terms/\n\n$id: https://json-ld.github.io/yaml-ld/spec/\n$type: fip:Knowledge-representation-language\ndc:description: |\n  A set of conventions built on top of YAML, which outlines how to serialize\n  Linked Data as YAML based on JSON-LD syntax, semantics, and APIs.\nrdfs:label: YAML-LD\n</code></pre> <p>At any rate, Iolanta is always ready to help by visualizing it. Each of the links is clickable, leading you to further information about the concepts involved.</p> <p></p>"},{"location":"howto/nanopublish/#make-it-a-valid-nanopublication","title":"Make it a valid Nanopublication","text":"<pre><code>pyld expand yaml-ld.yamlld | np create --output-format json-ld from-assertion --input-format json-ld &gt; np.yaml-ld.jsonld    # (1)!\n</code></pre> <ol> <li>This command is fairly clumsy, I will see if I can make it easier in the future. Here, we have to convert YAML-LD to JSON-LD with <code>pyld expand</code> \u2014 since <code>nanopub-py</code> presently does not support YAML-LD. Then, we create the nanopublication with <code>np create</code> and store it in <code>np.yaml-ld.jsonld</code> file.</li> </ol> <p>Let's preview the nanopublication.</p> np.yaml-ld.jsonld<pre><code>[\n  {\n    \"@graph\": [\n      {\n        \"@id\": \"http://purl.org/nanopub/temp/np/\",\n        \"@type\": [\n          \"http://www.nanopub.org/nschema#Nanopublication\"\n        ],\n        \"http://www.nanopub.org/nschema#hasAssertion\": [\n          {\n</code></pre> <p>Check it out as:</p> <pre><code>iolanta np.yaml-ld.jsonld\n</code></pre> <p></p> <p>Shall we consider this nanopublication fit for the world? I guess so.</p>"},{"location":"howto/nanopublish/#publish","title":"Publish!","text":"<p><pre><code>np publish --test np.yaml-ld.jsonld\n</code></pre> \u21d2</p> <pre><code> \ud83e\uddea Publishing to the test server\n \ud83d\udcec\ufe0f Nanopub published at https://w3id.org/np/RAAnO3U0Lc56gbYHz5MZD440460c88Qfiz8cTfP58nvvs\n</code></pre> <p>Profile setup</p> <p>If you haven't yet set up your profile, you will be prompted to do so. Follow the recommendations given by the tool.</p> <p>You can see your nanopub published now!</p> <p></p> <p>You can also view it with Iolanta.</p> <pre><code>iolanta https://w3id.org/np/RAAnO3U0Lc56gbYHz5MZD440460c88Qfiz8cTfP58nvvs\n</code></pre> <p></p>"},{"location":"howto/nanopublish/#conclusion","title":"Conclusion","text":"<p>Iolanta helps visualize the nanopublication which you are writing, it helps confirm that the URLs you use are indeed resolving to Linked Data, thus connecting your new nanopublication to the existing body of semantically expressed knowledge.</p> <p>This way, Iolanta might help avoid mistakes and make your nanopublication more readable.</p> <p>YAML-LD, which we used for examples in this tutorial, provices a concise and human friendly syntax for writing Knowledge Graphs.</p> <p>I hope these tools will help you in your nanopublication journey.</p>"},{"location":"howto/nanopublish-with-llm/","title":"Nanopublish with LLM","text":""},{"location":"howto/nanopublish-with-llm/#choosing-the-editor","title":"Choosing the editor","text":"Tool Decision Reason Version Evaluated Cursor IDE Yes No issues found so far Current @ 2025-09-18 JetBrains IDE + JetBrains AI Assistant No Cannot run a command and directly consume its output, we have to resort to copy-paste, which is not ergonomic at all. 2025.2.0.1"},{"location":"howto/nanopublish-with-llm/rhysling-crater/","title":"Rhysling crater","text":"<p>The crater Rhysling on the Moon was named after Rhysling, a fictional character from a short story named \"The Green Hills of Earth\" by Robert A. Heinlein.</p>"},{"location":"reference/","title":"Reference","text":""},{"location":"reference/#iolanta-vocabulary","title":"Iolanta Vocabulary","text":"<ul> <li> <p> <code>iolanta:Facet</code></p> <p>RDFS class for Iolanta Facets \u2014 the magic things which visualize pieces of Linked Data in Iolanta.</p> </li> <li> <p> <code>iolanta:OutputDatatype</code></p> <p>Output format where visualization applications render their results.</p> </li> <li> <p> <code>iolanta:SPARQLText</code></p> <p>A datatype for representing SPARQL query text.</p> </li> <li> <p> <code>iolanta:matches</code></p> <p>Describe what kind of nodes a given Facet can visualize.</p> </li> <li> <p> <code>iolanta:has-sub-graph</code></p> <p>Links an RDF Graph representing a document to each other RDF Graph that was parsed from said document.</p> </li> <li> <p>\u227c <code>iolanta:is-preferred-over</code></p> <p>Specify that one Facet is cooler than the other.</p> </li> <li> <p>\u2192 <code>iolanta:outputs</code></p> <p>Specify the datatype of the visualization a given Facet produces.</p> </li> <li> <p>\ud83d\udcdb <code>iolanta:when-no-facet-found</code></p> <p>What if no facet is found to visualize this node for a given datatype? Specify an emergency facet to use in such cases.</p> </li> </ul>"},{"location":"reference/iolanta/OutputDatatype/","title":"<code>iolanta:OutputDatatype</code> class","text":"<ul> <li> <p> Superclass</p> <p><code>rdfs:Datatype</code> RDF Schema datatype</p> </li> <li> <p> Purpose</p> <p>Output format where visualization applications render their resultsExamples: terminal text, HTML, Mermaid diagrams</p> </li> </ul> <p><code>iolanta:OutputDatatype</code> represents the output format where visualization applications render their results. This class is a subclass of <code>rdfs:Datatype</code> and defines the various formats that Iolanta facets can produce.</p>"},{"location":"reference/iolanta/OutputDatatype/#examples","title":"Examples","text":"<ul> <li>Terminal Text: <code>https://iolanta.tech/cli/textual</code></li> <li>HTML: <code>https://iolanta.tech/datatypes/html</code></li> <li>Mermaid Diagrams: <code>https://iolanta.tech/datatypes/mermaid</code></li> <li>Icons: <code>https://iolanta.tech/datatypes/icon</code></li> </ul>"},{"location":"reference/iolanta/OutputDatatype/#usage","title":"Usage","text":"<p>Facets specify which output datatypes they support using the <code>iolanta:outputs</code> property:</p> <pre><code>$id: pkg:pypi/iolanta#textual-graph\niolanta:outputs: https://iolanta.tech/cli/textual\n</code></pre> <p>This allows Iolanta to select appropriate facets based on the desired output format.</p>"},{"location":"reference/iolanta/SPARQLText/","title":"<code>iolanta:SPARQLText</code> class","text":"<ul> <li> <p> Superclass</p> <p><code>rdfs:Datatype</code> RDF Schema datatype</p> </li> <li> <p> Purpose</p> <p>A datatype for representing SPARQL query textEnables semantic validation and tooling</p> </li> </ul> <p><code>iolanta:SPARQLText</code> is a custom datatype for representing SPARQL query text. This allows for semantic validation and tooling specific to SPARQL syntax.</p>"},{"location":"reference/iolanta/SPARQLText/#usage","title":"Usage","text":"<p>The <code>iolanta:matches</code> property uses <code>iolanta:SPARQLText</code> to specify SPARQL ASK queries:</p> <pre><code>$id: iolanta:matches\nrdfs:range: iolanta:SPARQLText\n</code></pre> <p>This enables: - Syntax validation of SPARQL queries - Tooling support for query editing and debugging - Semantic understanding of query patterns - Type safety in RDF processing</p>"},{"location":"reference/iolanta/SPARQLText/#examples","title":"Examples","text":"<pre><code>ASK WHERE { ?instance a $this }\nASK WHERE { GRAPH $this { ?s ?p ?o } }\nASK WHERE { ?subject $this ?object }\n</code></pre>"},{"location":"reference/ontology/","title":"<code>Ontology</code> Facet","text":"Is instance facet of <code>owl:Ontology</code> Renders in environment <code>https://iolanta.tech/cli/default</code> <p>Render a vocabulary described as <code>owl:Ontology</code>.</p> <ul> <li>Listing each of its terms connected to the ontology using <code>rdfs:isDefinedBy</code> property,</li> <li>Except those terms for which <code>vs:status</code> is <code>archaic</code> though,</li> <li>And group the terms visually by classes connected to the ontology using <code>vann:termGroup</code> property.</li> </ul>"},{"location":"reference/ontology/#usage","title":"Usage","text":"<pre><code>iolanta browse foaf:\n</code></pre>"},{"location":"screenshots/","title":"Screenshots","text":"<ul> <li> <p> <code>iolanta https://purl.org/np/RARv1-bZWsdvQs88TDH2trcwNoGF1g5AawE2sPKeh5K_0</code></p> <p></p> <p>A retracted nanopublication.</p> </li> <li> <p> <code>iolanta https://orcid.org/0000-0002-1825-0097</code></p> <p></p> <p>ORCID Profile of a fictitious person.</p> </li> <li> <p> <code>iolanta rdfs:</code></p> <p></p> <p>RDFS Vocabulary.</p> </li> <li> <p> <code>iolanta rdfs:Class</code></p> <p></p> <p>RDFS Class and its instances.</p> </li> <li> <p> <code>iolanta rdf:</code></p> <p></p> <p>RDF Vocabulary.</p> </li> <li> <p> <code>iolanta rdf:type</code></p> <p></p> <p>RDF Type property and its properties.</p> </li> <li> <p> <code>iolanta owl:</code></p> <p></p> <p>Web Ontology Language Vocabulary. </p> </li> <li> <p> <code>iolanta owl:Ontology</code></p> <p></p> <p>Class of ontologies. </p> </li> <li> <p> <code>iolanta foaf:</code></p> <p></p> <p>Friend of a Friend Vocabulary, Person class.</p> </li> <li> <p> <code>iolanta vann:</code></p> <p></p> <p>VANN Vocabulary.</p> </li> <li> <p> <code>iolanta https://www.wikidata.org/entity/Q204606</code></p> <p></p> <p>Cyberspace page @ Wikidata.</p> </li> </ul>"},{"location":"usecases/choose-project-dependency/github-only/","title":"Github only","text":""},{"location":"usecases/choose-project-dependency/github-only/#decision","title":"Decision","text":"<p>Github is the only place to search for code nowadays.</p>"},{"location":"usecases/choose-project-dependency/use-chatgpt/","title":"Use chatgpt","text":""},{"location":"usecases/choose-project-dependency/use-chatgpt/#decision","title":"Decision","text":"<p>Just ask ChatGPT to generate the comparison!</p>"}]}